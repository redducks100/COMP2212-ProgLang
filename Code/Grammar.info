-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from Grammar.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseCalc -> Program                        (0)
	Program -> StatementList                           (1)
	Statement -> "if" "(" Expr ")" "{" StatementList "}" "else" "{" StatementList "}"   (2)
	Statement -> "while" "(" Expr ")" "{" StatementList "}"   (3)
	Statement -> "print" "(" Expr ")" ";"              (4)
	Statement -> ident "=" Expr ";"                    (5)
	Statement -> ident "[" intLit "]" "=" Expr ";"     (6)
	Statement -> VarDeclr                              (7)
	Statement -> ArrayDeclr                            (8)
	VarDeclr -> Type ident ";"                         (9)
	VarDeclr -> Type ident "=" Expr ";"                (10)
	ExprList -> ExprList "," Expr                      (11)
	ExprList -> Expr                                   (12)
	ExprList ->                                        (13)
	ArrayDeclr -> Type "[" "]" ident ";"               (14)
	ArrayDeclr -> Type "[" "]" ident "=" Expr ";"      (15)
	StatementList -> Statement StatementList           (16)
	StatementList ->                                   (17)
	Expr -> "not" Expr                                 (18)
	Expr -> Expr "^" Expr                              (19)
	Expr -> Expr "/" Expr                              (20)
	Expr -> Expr "*" Expr                              (21)
	Expr -> Expr "+" Expr                              (22)
	Expr -> Expr "-" Expr                              (23)
	Expr -> Expr "<=" Expr                             (24)
	Expr -> Expr "<" Expr                              (25)
	Expr -> Expr ">" Expr                              (26)
	Expr -> Expr ">=" Expr                             (27)
	Expr -> Expr "==" Expr                             (28)
	Expr -> Expr "and" Expr                            (29)
	Expr -> Expr "or" Expr                             (30)
	Expr -> "(" Expr ")"                               (31)
	Expr -> "{" ExprList "}"                           (32)
	Expr -> ident "[" intLit "]"                       (33)
	Expr -> intLit                                     (34)
	Expr -> ident                                      (35)
	Expr -> "true"                                     (36)
	Expr -> "false"                                    (37)
	Expr -> stringLit                                  (38)
	Type -> "bool"                                     (39)
	Type -> "int"                                      (40)
	Type -> "string"                                   (41)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	"+"            { TokenOp _ '+' }
	"-"            { TokenOp _ '-' }
	"*"            { TokenOp _ '*' }
	"/"            { TokenOp _ '/' }
	"^"            { TokenOp _ '^' }
	"<"            { TokenCompareOp _ "<" }
	">"            { TokenCompareOp _ ">" }
	"<="           { TokenCompareOp _ "<=" }
	">="           { TokenCompareOp _ ">=" }
	"=="           { TokenCompareOp _ "==" }
	"and"          { TokenCompareOp _ "and" }
	"or"           { TokenCompareOp _ "or" }
	ident          { TokenIdent _ $$ }
	intLit         { TokenIntLit _ $$ }
	stringLit      { TokenStringLit _ $$ }
	"int"          { TokenInt _ }
	"string"       { TokenString _ }
	"bool"         { TokenBool _ }
	"="            { TokenEquals _ }
	"not"          { TokenNegate _ }
	"("            { TokenLeftParen _ }
	")"            { TokenRightParen _ }
	"["            { TokenLeftBracket _ }
	"]"            { TokenRightBracket _ }
	"{"            { TokenLeftBrace _ }
	"}"            { TokenRightBrace _ }
	";"            { TokenSemiColon _ }
	","            { TokenColon _ }
	"if"           { TokenIf _ }
	"else"         { TokenElse  _ }
	"true"         { TokenTrue  _ }
	"false"        { TokenFalse _ }
	"while"        { TokenWhile _ }
	"print"        { TokenPrint _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseCalc rule  0
	Program         rule  1
	Statement       rules 2, 3, 4, 5, 6, 7, 8
	VarDeclr        rules 9, 10
	ExprList        rules 11, 12, 13
	ArrayDeclr      rules 14, 15
	StatementList   rules 16, 17
	Expr            rules 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38
	Type            rules 39, 40, 41

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	ident          shift, and enter state 7
	"int"          shift, and enter state 8
	"string"       shift, and enter state 9
	"bool"         shift, and enter state 10
	"if"           shift, and enter state 11
	"while"        shift, and enter state 12
	"print"        shift, and enter state 13
	%eof           reduce using rule 17

	Program        goto state 14
	Statement      goto state 2
	VarDeclr       goto state 3
	ArrayDeclr     goto state 4
	StatementList  goto state 5
	Type           goto state 6

State 1


	ident          shift, and enter state 7
	"int"          shift, and enter state 8
	"string"       shift, and enter state 9
	"bool"         shift, and enter state 10
	"if"           shift, and enter state 11
	"while"        shift, and enter state 12
	"print"        shift, and enter state 13

	Statement      goto state 2
	VarDeclr       goto state 3
	ArrayDeclr     goto state 4
	StatementList  goto state 5
	Type           goto state 6

State 2

	StatementList -> Statement . StatementList          (rule 16)

	ident          shift, and enter state 7
	"int"          shift, and enter state 8
	"string"       shift, and enter state 9
	"bool"         shift, and enter state 10
	"}"            reduce using rule 17
	"if"           shift, and enter state 11
	"while"        shift, and enter state 12
	"print"        shift, and enter state 13
	%eof           reduce using rule 17

	Statement      goto state 2
	VarDeclr       goto state 3
	ArrayDeclr     goto state 4
	StatementList  goto state 22
	Type           goto state 6

State 3

	Statement -> VarDeclr .                             (rule 7)

	ident          reduce using rule 7
	"int"          reduce using rule 7
	"string"       reduce using rule 7
	"bool"         reduce using rule 7
	"}"            reduce using rule 7
	"if"           reduce using rule 7
	"while"        reduce using rule 7
	"print"        reduce using rule 7
	%eof           reduce using rule 7


State 4

	Statement -> ArrayDeclr .                           (rule 8)

	ident          reduce using rule 8
	"int"          reduce using rule 8
	"string"       reduce using rule 8
	"bool"         reduce using rule 8
	"}"            reduce using rule 8
	"if"           reduce using rule 8
	"while"        reduce using rule 8
	"print"        reduce using rule 8
	%eof           reduce using rule 8


State 5

	Program -> StatementList .                          (rule 1)

	%eof           reduce using rule 1


State 6

	VarDeclr -> Type . ident ";"                        (rule 9)
	VarDeclr -> Type . ident "=" Expr ";"               (rule 10)
	ArrayDeclr -> Type . "[" "]" ident ";"              (rule 14)
	ArrayDeclr -> Type . "[" "]" ident "=" Expr ";"     (rule 15)

	ident          shift, and enter state 20
	"["            shift, and enter state 21


State 7

	Statement -> ident . "=" Expr ";"                   (rule 5)
	Statement -> ident . "[" intLit "]" "=" Expr ";"    (rule 6)

	"="            shift, and enter state 18
	"["            shift, and enter state 19


State 8

	Type -> "int" .                                     (rule 40)

	ident          reduce using rule 40
	"["            reduce using rule 40


State 9

	Type -> "string" .                                  (rule 41)

	ident          reduce using rule 41
	"["            reduce using rule 41


State 10

	Type -> "bool" .                                    (rule 39)

	ident          reduce using rule 39
	"["            reduce using rule 39


State 11

	Statement -> "if" . "(" Expr ")" "{" StatementList "}" "else" "{" StatementList "}"    (rule 2)

	"("            shift, and enter state 17


State 12

	Statement -> "while" . "(" Expr ")" "{" StatementList "}"    (rule 3)

	"("            shift, and enter state 16


State 13

	Statement -> "print" . "(" Expr ")" ";"             (rule 4)

	"("            shift, and enter state 15


State 14

	%start_parseCalc -> Program .                       (rule 0)

	%eof           accept


State 15

	Statement -> "print" "(" . Expr ")" ";"             (rule 4)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	stringLit      shift, and enter state 30
	"not"          shift, and enter state 31
	"("            shift, and enter state 32
	"{"            shift, and enter state 33
	"true"         shift, and enter state 34
	"false"        shift, and enter state 35

	Expr           goto state 38

State 16

	Statement -> "while" "(" . Expr ")" "{" StatementList "}"    (rule 3)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	stringLit      shift, and enter state 30
	"not"          shift, and enter state 31
	"("            shift, and enter state 32
	"{"            shift, and enter state 33
	"true"         shift, and enter state 34
	"false"        shift, and enter state 35

	Expr           goto state 37

State 17

	Statement -> "if" "(" . Expr ")" "{" StatementList "}" "else" "{" StatementList "}"    (rule 2)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	stringLit      shift, and enter state 30
	"not"          shift, and enter state 31
	"("            shift, and enter state 32
	"{"            shift, and enter state 33
	"true"         shift, and enter state 34
	"false"        shift, and enter state 35

	Expr           goto state 36

State 18

	Statement -> ident "=" . Expr ";"                   (rule 5)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	stringLit      shift, and enter state 30
	"not"          shift, and enter state 31
	"("            shift, and enter state 32
	"{"            shift, and enter state 33
	"true"         shift, and enter state 34
	"false"        shift, and enter state 35

	Expr           goto state 27

State 19

	Statement -> ident "[" . intLit "]" "=" Expr ";"    (rule 6)

	intLit         shift, and enter state 26


State 20

	VarDeclr -> Type ident . ";"                        (rule 9)
	VarDeclr -> Type ident . "=" Expr ";"               (rule 10)

	"="            shift, and enter state 24
	";"            shift, and enter state 25


State 21

	ArrayDeclr -> Type "[" . "]" ident ";"              (rule 14)
	ArrayDeclr -> Type "[" . "]" ident "=" Expr ";"     (rule 15)

	"]"            shift, and enter state 23


State 22

	StatementList -> Statement StatementList .          (rule 16)

	"}"            reduce using rule 16
	%eof           reduce using rule 16


State 23

	ArrayDeclr -> Type "[" "]" . ident ";"              (rule 14)
	ArrayDeclr -> Type "[" "]" . ident "=" Expr ";"     (rule 15)

	ident          shift, and enter state 62


State 24

	VarDeclr -> Type ident "=" . Expr ";"               (rule 10)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	stringLit      shift, and enter state 30
	"not"          shift, and enter state 31
	"("            shift, and enter state 32
	"{"            shift, and enter state 33
	"true"         shift, and enter state 34
	"false"        shift, and enter state 35

	Expr           goto state 61

State 25

	VarDeclr -> Type ident ";" .                        (rule 9)

	ident          reduce using rule 9
	"int"          reduce using rule 9
	"string"       reduce using rule 9
	"bool"         reduce using rule 9
	"}"            reduce using rule 9
	"if"           reduce using rule 9
	"while"        reduce using rule 9
	"print"        reduce using rule 9
	%eof           reduce using rule 9


State 26

	Statement -> ident "[" intLit . "]" "=" Expr ";"    (rule 6)

	"]"            shift, and enter state 60


State 27

	Statement -> ident "=" Expr . ";"                   (rule 5)
	Expr -> Expr . "^" Expr                             (rule 19)
	Expr -> Expr . "/" Expr                             (rule 20)
	Expr -> Expr . "*" Expr                             (rule 21)
	Expr -> Expr . "+" Expr                             (rule 22)
	Expr -> Expr . "-" Expr                             (rule 23)
	Expr -> Expr . "<=" Expr                            (rule 24)
	Expr -> Expr . "<" Expr                             (rule 25)
	Expr -> Expr . ">" Expr                             (rule 26)
	Expr -> Expr . ">=" Expr                            (rule 27)
	Expr -> Expr . "==" Expr                            (rule 28)
	Expr -> Expr . "and" Expr                           (rule 29)
	Expr -> Expr . "or" Expr                            (rule 30)

	"+"            shift, and enter state 39
	"-"            shift, and enter state 40
	"*"            shift, and enter state 41
	"/"            shift, and enter state 42
	"^"            shift, and enter state 43
	"<"            shift, and enter state 44
	">"            shift, and enter state 45
	"<="           shift, and enter state 46
	">="           shift, and enter state 47
	"=="           shift, and enter state 48
	"and"          shift, and enter state 49
	"or"           shift, and enter state 50
	";"            shift, and enter state 59


State 28

	Expr -> ident . "[" intLit "]"                      (rule 33)
	Expr -> ident .                                     (rule 35)

	"+"            reduce using rule 35
	"-"            reduce using rule 35
	"*"            reduce using rule 35
	"/"            reduce using rule 35
	"^"            reduce using rule 35
	"<"            reduce using rule 35
	">"            reduce using rule 35
	"<="           reduce using rule 35
	">="           reduce using rule 35
	"=="           reduce using rule 35
	"and"          reduce using rule 35
	"or"           reduce using rule 35
	")"            reduce using rule 35
	"["            shift, and enter state 58
	"}"            reduce using rule 35
	";"            reduce using rule 35
	","            reduce using rule 35


State 29

	Expr -> intLit .                                    (rule 34)

	"+"            reduce using rule 34
	"-"            reduce using rule 34
	"*"            reduce using rule 34
	"/"            reduce using rule 34
	"^"            reduce using rule 34
	"<"            reduce using rule 34
	">"            reduce using rule 34
	"<="           reduce using rule 34
	">="           reduce using rule 34
	"=="           reduce using rule 34
	"and"          reduce using rule 34
	"or"           reduce using rule 34
	")"            reduce using rule 34
	"}"            reduce using rule 34
	";"            reduce using rule 34
	","            reduce using rule 34


State 30

	Expr -> stringLit .                                 (rule 38)

	"+"            reduce using rule 38
	"-"            reduce using rule 38
	"*"            reduce using rule 38
	"/"            reduce using rule 38
	"^"            reduce using rule 38
	"<"            reduce using rule 38
	">"            reduce using rule 38
	"<="           reduce using rule 38
	">="           reduce using rule 38
	"=="           reduce using rule 38
	"and"          reduce using rule 38
	"or"           reduce using rule 38
	")"            reduce using rule 38
	"}"            reduce using rule 38
	";"            reduce using rule 38
	","            reduce using rule 38


State 31

	Expr -> "not" . Expr                                (rule 18)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	stringLit      shift, and enter state 30
	"not"          shift, and enter state 31
	"("            shift, and enter state 32
	"{"            shift, and enter state 33
	"true"         shift, and enter state 34
	"false"        shift, and enter state 35

	Expr           goto state 57

State 32

	Expr -> "(" . Expr ")"                              (rule 31)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	stringLit      shift, and enter state 30
	"not"          shift, and enter state 31
	"("            shift, and enter state 32
	"{"            shift, and enter state 33
	"true"         shift, and enter state 34
	"false"        shift, and enter state 35

	Expr           goto state 56

State 33

	Expr -> "{" . ExprList "}"                          (rule 32)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	stringLit      shift, and enter state 30
	"not"          shift, and enter state 31
	"("            shift, and enter state 32
	"{"            shift, and enter state 33
	"}"            reduce using rule 13
	","            reduce using rule 13
	"true"         shift, and enter state 34
	"false"        shift, and enter state 35

	ExprList       goto state 54
	Expr           goto state 55

State 34

	Expr -> "true" .                                    (rule 36)

	"+"            reduce using rule 36
	"-"            reduce using rule 36
	"*"            reduce using rule 36
	"/"            reduce using rule 36
	"^"            reduce using rule 36
	"<"            reduce using rule 36
	">"            reduce using rule 36
	"<="           reduce using rule 36
	">="           reduce using rule 36
	"=="           reduce using rule 36
	"and"          reduce using rule 36
	"or"           reduce using rule 36
	")"            reduce using rule 36
	"}"            reduce using rule 36
	";"            reduce using rule 36
	","            reduce using rule 36


State 35

	Expr -> "false" .                                   (rule 37)

	"+"            reduce using rule 37
	"-"            reduce using rule 37
	"*"            reduce using rule 37
	"/"            reduce using rule 37
	"^"            reduce using rule 37
	"<"            reduce using rule 37
	">"            reduce using rule 37
	"<="           reduce using rule 37
	">="           reduce using rule 37
	"=="           reduce using rule 37
	"and"          reduce using rule 37
	"or"           reduce using rule 37
	")"            reduce using rule 37
	"}"            reduce using rule 37
	";"            reduce using rule 37
	","            reduce using rule 37


State 36

	Statement -> "if" "(" Expr . ")" "{" StatementList "}" "else" "{" StatementList "}"    (rule 2)
	Expr -> Expr . "^" Expr                             (rule 19)
	Expr -> Expr . "/" Expr                             (rule 20)
	Expr -> Expr . "*" Expr                             (rule 21)
	Expr -> Expr . "+" Expr                             (rule 22)
	Expr -> Expr . "-" Expr                             (rule 23)
	Expr -> Expr . "<=" Expr                            (rule 24)
	Expr -> Expr . "<" Expr                             (rule 25)
	Expr -> Expr . ">" Expr                             (rule 26)
	Expr -> Expr . ">=" Expr                            (rule 27)
	Expr -> Expr . "==" Expr                            (rule 28)
	Expr -> Expr . "and" Expr                           (rule 29)
	Expr -> Expr . "or" Expr                            (rule 30)

	"+"            shift, and enter state 39
	"-"            shift, and enter state 40
	"*"            shift, and enter state 41
	"/"            shift, and enter state 42
	"^"            shift, and enter state 43
	"<"            shift, and enter state 44
	">"            shift, and enter state 45
	"<="           shift, and enter state 46
	">="           shift, and enter state 47
	"=="           shift, and enter state 48
	"and"          shift, and enter state 49
	"or"           shift, and enter state 50
	")"            shift, and enter state 53


State 37

	Statement -> "while" "(" Expr . ")" "{" StatementList "}"    (rule 3)
	Expr -> Expr . "^" Expr                             (rule 19)
	Expr -> Expr . "/" Expr                             (rule 20)
	Expr -> Expr . "*" Expr                             (rule 21)
	Expr -> Expr . "+" Expr                             (rule 22)
	Expr -> Expr . "-" Expr                             (rule 23)
	Expr -> Expr . "<=" Expr                            (rule 24)
	Expr -> Expr . "<" Expr                             (rule 25)
	Expr -> Expr . ">" Expr                             (rule 26)
	Expr -> Expr . ">=" Expr                            (rule 27)
	Expr -> Expr . "==" Expr                            (rule 28)
	Expr -> Expr . "and" Expr                           (rule 29)
	Expr -> Expr . "or" Expr                            (rule 30)

	"+"            shift, and enter state 39
	"-"            shift, and enter state 40
	"*"            shift, and enter state 41
	"/"            shift, and enter state 42
	"^"            shift, and enter state 43
	"<"            shift, and enter state 44
	">"            shift, and enter state 45
	"<="           shift, and enter state 46
	">="           shift, and enter state 47
	"=="           shift, and enter state 48
	"and"          shift, and enter state 49
	"or"           shift, and enter state 50
	")"            shift, and enter state 52


State 38

	Statement -> "print" "(" Expr . ")" ";"             (rule 4)
	Expr -> Expr . "^" Expr                             (rule 19)
	Expr -> Expr . "/" Expr                             (rule 20)
	Expr -> Expr . "*" Expr                             (rule 21)
	Expr -> Expr . "+" Expr                             (rule 22)
	Expr -> Expr . "-" Expr                             (rule 23)
	Expr -> Expr . "<=" Expr                            (rule 24)
	Expr -> Expr . "<" Expr                             (rule 25)
	Expr -> Expr . ">" Expr                             (rule 26)
	Expr -> Expr . ">=" Expr                            (rule 27)
	Expr -> Expr . "==" Expr                            (rule 28)
	Expr -> Expr . "and" Expr                           (rule 29)
	Expr -> Expr . "or" Expr                            (rule 30)

	"+"            shift, and enter state 39
	"-"            shift, and enter state 40
	"*"            shift, and enter state 41
	"/"            shift, and enter state 42
	"^"            shift, and enter state 43
	"<"            shift, and enter state 44
	">"            shift, and enter state 45
	"<="           shift, and enter state 46
	">="           shift, and enter state 47
	"=="           shift, and enter state 48
	"and"          shift, and enter state 49
	"or"           shift, and enter state 50
	")"            shift, and enter state 51


State 39

	Expr -> Expr "+" . Expr                             (rule 22)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	stringLit      shift, and enter state 30
	"not"          shift, and enter state 31
	"("            shift, and enter state 32
	"{"            shift, and enter state 33
	"true"         shift, and enter state 34
	"false"        shift, and enter state 35

	Expr           goto state 85

State 40

	Expr -> Expr "-" . Expr                             (rule 23)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	stringLit      shift, and enter state 30
	"not"          shift, and enter state 31
	"("            shift, and enter state 32
	"{"            shift, and enter state 33
	"true"         shift, and enter state 34
	"false"        shift, and enter state 35

	Expr           goto state 84

State 41

	Expr -> Expr "*" . Expr                             (rule 21)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	stringLit      shift, and enter state 30
	"not"          shift, and enter state 31
	"("            shift, and enter state 32
	"{"            shift, and enter state 33
	"true"         shift, and enter state 34
	"false"        shift, and enter state 35

	Expr           goto state 83

State 42

	Expr -> Expr "/" . Expr                             (rule 20)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	stringLit      shift, and enter state 30
	"not"          shift, and enter state 31
	"("            shift, and enter state 32
	"{"            shift, and enter state 33
	"true"         shift, and enter state 34
	"false"        shift, and enter state 35

	Expr           goto state 82

State 43

	Expr -> Expr "^" . Expr                             (rule 19)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	stringLit      shift, and enter state 30
	"not"          shift, and enter state 31
	"("            shift, and enter state 32
	"{"            shift, and enter state 33
	"true"         shift, and enter state 34
	"false"        shift, and enter state 35

	Expr           goto state 81

State 44

	Expr -> Expr "<" . Expr                             (rule 25)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	stringLit      shift, and enter state 30
	"not"          shift, and enter state 31
	"("            shift, and enter state 32
	"{"            shift, and enter state 33
	"true"         shift, and enter state 34
	"false"        shift, and enter state 35

	Expr           goto state 80

State 45

	Expr -> Expr ">" . Expr                             (rule 26)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	stringLit      shift, and enter state 30
	"not"          shift, and enter state 31
	"("            shift, and enter state 32
	"{"            shift, and enter state 33
	"true"         shift, and enter state 34
	"false"        shift, and enter state 35

	Expr           goto state 79

State 46

	Expr -> Expr "<=" . Expr                            (rule 24)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	stringLit      shift, and enter state 30
	"not"          shift, and enter state 31
	"("            shift, and enter state 32
	"{"            shift, and enter state 33
	"true"         shift, and enter state 34
	"false"        shift, and enter state 35

	Expr           goto state 78

State 47

	Expr -> Expr ">=" . Expr                            (rule 27)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	stringLit      shift, and enter state 30
	"not"          shift, and enter state 31
	"("            shift, and enter state 32
	"{"            shift, and enter state 33
	"true"         shift, and enter state 34
	"false"        shift, and enter state 35

	Expr           goto state 77

State 48

	Expr -> Expr "==" . Expr                            (rule 28)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	stringLit      shift, and enter state 30
	"not"          shift, and enter state 31
	"("            shift, and enter state 32
	"{"            shift, and enter state 33
	"true"         shift, and enter state 34
	"false"        shift, and enter state 35

	Expr           goto state 76

State 49

	Expr -> Expr "and" . Expr                           (rule 29)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	stringLit      shift, and enter state 30
	"not"          shift, and enter state 31
	"("            shift, and enter state 32
	"{"            shift, and enter state 33
	"true"         shift, and enter state 34
	"false"        shift, and enter state 35

	Expr           goto state 75

State 50

	Expr -> Expr "or" . Expr                            (rule 30)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	stringLit      shift, and enter state 30
	"not"          shift, and enter state 31
	"("            shift, and enter state 32
	"{"            shift, and enter state 33
	"true"         shift, and enter state 34
	"false"        shift, and enter state 35

	Expr           goto state 74

State 51

	Statement -> "print" "(" Expr ")" . ";"             (rule 4)

	";"            shift, and enter state 73


State 52

	Statement -> "while" "(" Expr ")" . "{" StatementList "}"    (rule 3)

	"{"            shift, and enter state 72


State 53

	Statement -> "if" "(" Expr ")" . "{" StatementList "}" "else" "{" StatementList "}"    (rule 2)

	"{"            shift, and enter state 71


State 54

	ExprList -> ExprList . "," Expr                     (rule 11)
	Expr -> "{" ExprList . "}"                          (rule 32)

	"}"            shift, and enter state 69
	","            shift, and enter state 70


State 55

	ExprList -> Expr .                                  (rule 12)
	Expr -> Expr . "^" Expr                             (rule 19)
	Expr -> Expr . "/" Expr                             (rule 20)
	Expr -> Expr . "*" Expr                             (rule 21)
	Expr -> Expr . "+" Expr                             (rule 22)
	Expr -> Expr . "-" Expr                             (rule 23)
	Expr -> Expr . "<=" Expr                            (rule 24)
	Expr -> Expr . "<" Expr                             (rule 25)
	Expr -> Expr . ">" Expr                             (rule 26)
	Expr -> Expr . ">=" Expr                            (rule 27)
	Expr -> Expr . "==" Expr                            (rule 28)
	Expr -> Expr . "and" Expr                           (rule 29)
	Expr -> Expr . "or" Expr                            (rule 30)

	"+"            shift, and enter state 39
	"-"            shift, and enter state 40
	"*"            shift, and enter state 41
	"/"            shift, and enter state 42
	"^"            shift, and enter state 43
	"<"            shift, and enter state 44
	">"            shift, and enter state 45
	"<="           shift, and enter state 46
	">="           shift, and enter state 47
	"=="           shift, and enter state 48
	"and"          shift, and enter state 49
	"or"           shift, and enter state 50
	"}"            reduce using rule 12
	","            reduce using rule 12


State 56

	Expr -> Expr . "^" Expr                             (rule 19)
	Expr -> Expr . "/" Expr                             (rule 20)
	Expr -> Expr . "*" Expr                             (rule 21)
	Expr -> Expr . "+" Expr                             (rule 22)
	Expr -> Expr . "-" Expr                             (rule 23)
	Expr -> Expr . "<=" Expr                            (rule 24)
	Expr -> Expr . "<" Expr                             (rule 25)
	Expr -> Expr . ">" Expr                             (rule 26)
	Expr -> Expr . ">=" Expr                            (rule 27)
	Expr -> Expr . "==" Expr                            (rule 28)
	Expr -> Expr . "and" Expr                           (rule 29)
	Expr -> Expr . "or" Expr                            (rule 30)
	Expr -> "(" Expr . ")"                              (rule 31)

	"+"            shift, and enter state 39
	"-"            shift, and enter state 40
	"*"            shift, and enter state 41
	"/"            shift, and enter state 42
	"^"            shift, and enter state 43
	"<"            shift, and enter state 44
	">"            shift, and enter state 45
	"<="           shift, and enter state 46
	">="           shift, and enter state 47
	"=="           shift, and enter state 48
	"and"          shift, and enter state 49
	"or"           shift, and enter state 50
	")"            shift, and enter state 68


State 57

	Expr -> "not" Expr .                                (rule 18)
	Expr -> Expr . "^" Expr                             (rule 19)
	Expr -> Expr . "/" Expr                             (rule 20)
	Expr -> Expr . "*" Expr                             (rule 21)
	Expr -> Expr . "+" Expr                             (rule 22)
	Expr -> Expr . "-" Expr                             (rule 23)
	Expr -> Expr . "<=" Expr                            (rule 24)
	Expr -> Expr . "<" Expr                             (rule 25)
	Expr -> Expr . ">" Expr                             (rule 26)
	Expr -> Expr . ">=" Expr                            (rule 27)
	Expr -> Expr . "==" Expr                            (rule 28)
	Expr -> Expr . "and" Expr                           (rule 29)
	Expr -> Expr . "or" Expr                            (rule 30)

	"+"            reduce using rule 18
	"-"            reduce using rule 18
	"*"            reduce using rule 18
	"/"            reduce using rule 18
	"^"            reduce using rule 18
	"<"            reduce using rule 18
	">"            reduce using rule 18
	"<="           reduce using rule 18
	">="           reduce using rule 18
	"=="           reduce using rule 18
	"and"          reduce using rule 18
	"or"           reduce using rule 18
	")"            reduce using rule 18
	"}"            reduce using rule 18
	";"            reduce using rule 18
	","            reduce using rule 18


State 58

	Expr -> ident "[" . intLit "]"                      (rule 33)

	intLit         shift, and enter state 67


State 59

	Statement -> ident "=" Expr ";" .                   (rule 5)

	ident          reduce using rule 5
	"int"          reduce using rule 5
	"string"       reduce using rule 5
	"bool"         reduce using rule 5
	"}"            reduce using rule 5
	"if"           reduce using rule 5
	"while"        reduce using rule 5
	"print"        reduce using rule 5
	%eof           reduce using rule 5


State 60

	Statement -> ident "[" intLit "]" . "=" Expr ";"    (rule 6)

	"="            shift, and enter state 66


State 61

	VarDeclr -> Type ident "=" Expr . ";"               (rule 10)
	Expr -> Expr . "^" Expr                             (rule 19)
	Expr -> Expr . "/" Expr                             (rule 20)
	Expr -> Expr . "*" Expr                             (rule 21)
	Expr -> Expr . "+" Expr                             (rule 22)
	Expr -> Expr . "-" Expr                             (rule 23)
	Expr -> Expr . "<=" Expr                            (rule 24)
	Expr -> Expr . "<" Expr                             (rule 25)
	Expr -> Expr . ">" Expr                             (rule 26)
	Expr -> Expr . ">=" Expr                            (rule 27)
	Expr -> Expr . "==" Expr                            (rule 28)
	Expr -> Expr . "and" Expr                           (rule 29)
	Expr -> Expr . "or" Expr                            (rule 30)

	"+"            shift, and enter state 39
	"-"            shift, and enter state 40
	"*"            shift, and enter state 41
	"/"            shift, and enter state 42
	"^"            shift, and enter state 43
	"<"            shift, and enter state 44
	">"            shift, and enter state 45
	"<="           shift, and enter state 46
	">="           shift, and enter state 47
	"=="           shift, and enter state 48
	"and"          shift, and enter state 49
	"or"           shift, and enter state 50
	";"            shift, and enter state 65


State 62

	ArrayDeclr -> Type "[" "]" ident . ";"              (rule 14)
	ArrayDeclr -> Type "[" "]" ident . "=" Expr ";"     (rule 15)

	"="            shift, and enter state 63
	";"            shift, and enter state 64


State 63

	ArrayDeclr -> Type "[" "]" ident "=" . Expr ";"     (rule 15)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	stringLit      shift, and enter state 30
	"not"          shift, and enter state 31
	"("            shift, and enter state 32
	"{"            shift, and enter state 33
	"true"         shift, and enter state 34
	"false"        shift, and enter state 35

	Expr           goto state 91

State 64

	ArrayDeclr -> Type "[" "]" ident ";" .              (rule 14)

	ident          reduce using rule 14
	"int"          reduce using rule 14
	"string"       reduce using rule 14
	"bool"         reduce using rule 14
	"}"            reduce using rule 14
	"if"           reduce using rule 14
	"while"        reduce using rule 14
	"print"        reduce using rule 14
	%eof           reduce using rule 14


State 65

	VarDeclr -> Type ident "=" Expr ";" .               (rule 10)

	ident          reduce using rule 10
	"int"          reduce using rule 10
	"string"       reduce using rule 10
	"bool"         reduce using rule 10
	"}"            reduce using rule 10
	"if"           reduce using rule 10
	"while"        reduce using rule 10
	"print"        reduce using rule 10
	%eof           reduce using rule 10


State 66

	Statement -> ident "[" intLit "]" "=" . Expr ";"    (rule 6)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	stringLit      shift, and enter state 30
	"not"          shift, and enter state 31
	"("            shift, and enter state 32
	"{"            shift, and enter state 33
	"true"         shift, and enter state 34
	"false"        shift, and enter state 35

	Expr           goto state 90

State 67

	Expr -> ident "[" intLit . "]"                      (rule 33)

	"]"            shift, and enter state 89


State 68

	Expr -> "(" Expr ")" .                              (rule 31)

	"+"            reduce using rule 31
	"-"            reduce using rule 31
	"*"            reduce using rule 31
	"/"            reduce using rule 31
	"^"            reduce using rule 31
	"<"            reduce using rule 31
	">"            reduce using rule 31
	"<="           reduce using rule 31
	">="           reduce using rule 31
	"=="           reduce using rule 31
	"and"          reduce using rule 31
	"or"           reduce using rule 31
	")"            reduce using rule 31
	"}"            reduce using rule 31
	";"            reduce using rule 31
	","            reduce using rule 31


State 69

	Expr -> "{" ExprList "}" .                          (rule 32)

	"+"            reduce using rule 32
	"-"            reduce using rule 32
	"*"            reduce using rule 32
	"/"            reduce using rule 32
	"^"            reduce using rule 32
	"<"            reduce using rule 32
	">"            reduce using rule 32
	"<="           reduce using rule 32
	">="           reduce using rule 32
	"=="           reduce using rule 32
	"and"          reduce using rule 32
	"or"           reduce using rule 32
	")"            reduce using rule 32
	"}"            reduce using rule 32
	";"            reduce using rule 32
	","            reduce using rule 32


State 70

	ExprList -> ExprList "," . Expr                     (rule 11)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	stringLit      shift, and enter state 30
	"not"          shift, and enter state 31
	"("            shift, and enter state 32
	"{"            shift, and enter state 33
	"true"         shift, and enter state 34
	"false"        shift, and enter state 35

	Expr           goto state 88

State 71

	Statement -> "if" "(" Expr ")" "{" . StatementList "}" "else" "{" StatementList "}"    (rule 2)

	ident          shift, and enter state 7
	"int"          shift, and enter state 8
	"string"       shift, and enter state 9
	"bool"         shift, and enter state 10
	"}"            reduce using rule 17
	"if"           shift, and enter state 11
	"while"        shift, and enter state 12
	"print"        shift, and enter state 13

	Statement      goto state 2
	VarDeclr       goto state 3
	ArrayDeclr     goto state 4
	StatementList  goto state 87
	Type           goto state 6

State 72

	Statement -> "while" "(" Expr ")" "{" . StatementList "}"    (rule 3)

	ident          shift, and enter state 7
	"int"          shift, and enter state 8
	"string"       shift, and enter state 9
	"bool"         shift, and enter state 10
	"}"            reduce using rule 17
	"if"           shift, and enter state 11
	"while"        shift, and enter state 12
	"print"        shift, and enter state 13

	Statement      goto state 2
	VarDeclr       goto state 3
	ArrayDeclr     goto state 4
	StatementList  goto state 86
	Type           goto state 6

State 73

	Statement -> "print" "(" Expr ")" ";" .             (rule 4)

	ident          reduce using rule 4
	"int"          reduce using rule 4
	"string"       reduce using rule 4
	"bool"         reduce using rule 4
	"}"            reduce using rule 4
	"if"           reduce using rule 4
	"while"        reduce using rule 4
	"print"        reduce using rule 4
	%eof           reduce using rule 4


State 74

	Expr -> Expr . "^" Expr                             (rule 19)
	Expr -> Expr . "/" Expr                             (rule 20)
	Expr -> Expr . "*" Expr                             (rule 21)
	Expr -> Expr . "+" Expr                             (rule 22)
	Expr -> Expr . "-" Expr                             (rule 23)
	Expr -> Expr . "<=" Expr                            (rule 24)
	Expr -> Expr . "<" Expr                             (rule 25)
	Expr -> Expr . ">" Expr                             (rule 26)
	Expr -> Expr . ">=" Expr                            (rule 27)
	Expr -> Expr . "==" Expr                            (rule 28)
	Expr -> Expr . "and" Expr                           (rule 29)
	Expr -> Expr . "or" Expr                            (rule 30)
	Expr -> Expr "or" Expr .                            (rule 30)

	"+"            shift, and enter state 39
	"-"            shift, and enter state 40
	"*"            shift, and enter state 41
	"/"            shift, and enter state 42
	"^"            shift, and enter state 43
	"<"            reduce using rule 30
	">"            reduce using rule 30
	"<="           reduce using rule 30
	">="           reduce using rule 30
	"=="           reduce using rule 30
	"and"          reduce using rule 30
	"or"           reduce using rule 30
	")"            reduce using rule 30
	"}"            reduce using rule 30
	";"            reduce using rule 30
	","            reduce using rule 30


State 75

	Expr -> Expr . "^" Expr                             (rule 19)
	Expr -> Expr . "/" Expr                             (rule 20)
	Expr -> Expr . "*" Expr                             (rule 21)
	Expr -> Expr . "+" Expr                             (rule 22)
	Expr -> Expr . "-" Expr                             (rule 23)
	Expr -> Expr . "<=" Expr                            (rule 24)
	Expr -> Expr . "<" Expr                             (rule 25)
	Expr -> Expr . ">" Expr                             (rule 26)
	Expr -> Expr . ">=" Expr                            (rule 27)
	Expr -> Expr . "==" Expr                            (rule 28)
	Expr -> Expr . "and" Expr                           (rule 29)
	Expr -> Expr "and" Expr .                           (rule 29)
	Expr -> Expr . "or" Expr                            (rule 30)

	"+"            shift, and enter state 39
	"-"            shift, and enter state 40
	"*"            shift, and enter state 41
	"/"            shift, and enter state 42
	"^"            shift, and enter state 43
	"<"            reduce using rule 29
	">"            reduce using rule 29
	"<="           reduce using rule 29
	">="           reduce using rule 29
	"=="           reduce using rule 29
	"and"          reduce using rule 29
	"or"           reduce using rule 29
	")"            reduce using rule 29
	"}"            reduce using rule 29
	";"            reduce using rule 29
	","            reduce using rule 29


State 76

	Expr -> Expr . "^" Expr                             (rule 19)
	Expr -> Expr . "/" Expr                             (rule 20)
	Expr -> Expr . "*" Expr                             (rule 21)
	Expr -> Expr . "+" Expr                             (rule 22)
	Expr -> Expr . "-" Expr                             (rule 23)
	Expr -> Expr . "<=" Expr                            (rule 24)
	Expr -> Expr . "<" Expr                             (rule 25)
	Expr -> Expr . ">" Expr                             (rule 26)
	Expr -> Expr . ">=" Expr                            (rule 27)
	Expr -> Expr . "==" Expr                            (rule 28)
	Expr -> Expr "==" Expr .                            (rule 28)
	Expr -> Expr . "and" Expr                           (rule 29)
	Expr -> Expr . "or" Expr                            (rule 30)

	"+"            shift, and enter state 39
	"-"            shift, and enter state 40
	"*"            shift, and enter state 41
	"/"            shift, and enter state 42
	"^"            shift, and enter state 43
	"<"            fail
	">"            fail
	"<="           fail
	">="           fail
	"=="           fail
	"and"          shift, and enter state 49
	"or"           shift, and enter state 50
	")"            reduce using rule 28
	"}"            reduce using rule 28
	";"            reduce using rule 28
	","            reduce using rule 28


State 77

	Expr -> Expr . "^" Expr                             (rule 19)
	Expr -> Expr . "/" Expr                             (rule 20)
	Expr -> Expr . "*" Expr                             (rule 21)
	Expr -> Expr . "+" Expr                             (rule 22)
	Expr -> Expr . "-" Expr                             (rule 23)
	Expr -> Expr . "<=" Expr                            (rule 24)
	Expr -> Expr . "<" Expr                             (rule 25)
	Expr -> Expr . ">" Expr                             (rule 26)
	Expr -> Expr . ">=" Expr                            (rule 27)
	Expr -> Expr ">=" Expr .                            (rule 27)
	Expr -> Expr . "==" Expr                            (rule 28)
	Expr -> Expr . "and" Expr                           (rule 29)
	Expr -> Expr . "or" Expr                            (rule 30)

	"+"            shift, and enter state 39
	"-"            shift, and enter state 40
	"*"            shift, and enter state 41
	"/"            shift, and enter state 42
	"^"            shift, and enter state 43
	"<"            fail
	">"            fail
	"<="           fail
	">="           fail
	"=="           fail
	"and"          shift, and enter state 49
	"or"           shift, and enter state 50
	")"            reduce using rule 27
	"}"            reduce using rule 27
	";"            reduce using rule 27
	","            reduce using rule 27


State 78

	Expr -> Expr . "^" Expr                             (rule 19)
	Expr -> Expr . "/" Expr                             (rule 20)
	Expr -> Expr . "*" Expr                             (rule 21)
	Expr -> Expr . "+" Expr                             (rule 22)
	Expr -> Expr . "-" Expr                             (rule 23)
	Expr -> Expr . "<=" Expr                            (rule 24)
	Expr -> Expr "<=" Expr .                            (rule 24)
	Expr -> Expr . "<" Expr                             (rule 25)
	Expr -> Expr . ">" Expr                             (rule 26)
	Expr -> Expr . ">=" Expr                            (rule 27)
	Expr -> Expr . "==" Expr                            (rule 28)
	Expr -> Expr . "and" Expr                           (rule 29)
	Expr -> Expr . "or" Expr                            (rule 30)

	"+"            shift, and enter state 39
	"-"            shift, and enter state 40
	"*"            shift, and enter state 41
	"/"            shift, and enter state 42
	"^"            shift, and enter state 43
	"<"            fail
	">"            fail
	"<="           fail
	">="           fail
	"=="           fail
	"and"          shift, and enter state 49
	"or"           shift, and enter state 50
	")"            reduce using rule 24
	"}"            reduce using rule 24
	";"            reduce using rule 24
	","            reduce using rule 24


State 79

	Expr -> Expr . "^" Expr                             (rule 19)
	Expr -> Expr . "/" Expr                             (rule 20)
	Expr -> Expr . "*" Expr                             (rule 21)
	Expr -> Expr . "+" Expr                             (rule 22)
	Expr -> Expr . "-" Expr                             (rule 23)
	Expr -> Expr . "<=" Expr                            (rule 24)
	Expr -> Expr . "<" Expr                             (rule 25)
	Expr -> Expr . ">" Expr                             (rule 26)
	Expr -> Expr ">" Expr .                             (rule 26)
	Expr -> Expr . ">=" Expr                            (rule 27)
	Expr -> Expr . "==" Expr                            (rule 28)
	Expr -> Expr . "and" Expr                           (rule 29)
	Expr -> Expr . "or" Expr                            (rule 30)

	"+"            shift, and enter state 39
	"-"            shift, and enter state 40
	"*"            shift, and enter state 41
	"/"            shift, and enter state 42
	"^"            shift, and enter state 43
	"<"            fail
	">"            fail
	"<="           fail
	">="           fail
	"=="           fail
	"and"          shift, and enter state 49
	"or"           shift, and enter state 50
	")"            reduce using rule 26
	"}"            reduce using rule 26
	";"            reduce using rule 26
	","            reduce using rule 26


State 80

	Expr -> Expr . "^" Expr                             (rule 19)
	Expr -> Expr . "/" Expr                             (rule 20)
	Expr -> Expr . "*" Expr                             (rule 21)
	Expr -> Expr . "+" Expr                             (rule 22)
	Expr -> Expr . "-" Expr                             (rule 23)
	Expr -> Expr . "<=" Expr                            (rule 24)
	Expr -> Expr . "<" Expr                             (rule 25)
	Expr -> Expr "<" Expr .                             (rule 25)
	Expr -> Expr . ">" Expr                             (rule 26)
	Expr -> Expr . ">=" Expr                            (rule 27)
	Expr -> Expr . "==" Expr                            (rule 28)
	Expr -> Expr . "and" Expr                           (rule 29)
	Expr -> Expr . "or" Expr                            (rule 30)

	"+"            shift, and enter state 39
	"-"            shift, and enter state 40
	"*"            shift, and enter state 41
	"/"            shift, and enter state 42
	"^"            shift, and enter state 43
	"<"            fail
	">"            fail
	"<="           fail
	">="           fail
	"=="           fail
	"and"          shift, and enter state 49
	"or"           shift, and enter state 50
	")"            reduce using rule 25
	"}"            reduce using rule 25
	";"            reduce using rule 25
	","            reduce using rule 25


State 81

	Expr -> Expr . "^" Expr                             (rule 19)
	Expr -> Expr "^" Expr .                             (rule 19)
	Expr -> Expr . "/" Expr                             (rule 20)
	Expr -> Expr . "*" Expr                             (rule 21)
	Expr -> Expr . "+" Expr                             (rule 22)
	Expr -> Expr . "-" Expr                             (rule 23)
	Expr -> Expr . "<=" Expr                            (rule 24)
	Expr -> Expr . "<" Expr                             (rule 25)
	Expr -> Expr . ">" Expr                             (rule 26)
	Expr -> Expr . ">=" Expr                            (rule 27)
	Expr -> Expr . "==" Expr                            (rule 28)
	Expr -> Expr . "and" Expr                           (rule 29)
	Expr -> Expr . "or" Expr                            (rule 30)

	"+"            reduce using rule 19
	"-"            reduce using rule 19
	"*"            reduce using rule 19
	"/"            reduce using rule 19
	"^"            reduce using rule 19
	"<"            reduce using rule 19
	">"            reduce using rule 19
	"<="           reduce using rule 19
	">="           reduce using rule 19
	"=="           reduce using rule 19
	"and"          reduce using rule 19
	"or"           reduce using rule 19
	")"            reduce using rule 19
	"}"            reduce using rule 19
	";"            reduce using rule 19
	","            reduce using rule 19


State 82

	Expr -> Expr . "^" Expr                             (rule 19)
	Expr -> Expr . "/" Expr                             (rule 20)
	Expr -> Expr "/" Expr .                             (rule 20)
	Expr -> Expr . "*" Expr                             (rule 21)
	Expr -> Expr . "+" Expr                             (rule 22)
	Expr -> Expr . "-" Expr                             (rule 23)
	Expr -> Expr . "<=" Expr                            (rule 24)
	Expr -> Expr . "<" Expr                             (rule 25)
	Expr -> Expr . ">" Expr                             (rule 26)
	Expr -> Expr . ">=" Expr                            (rule 27)
	Expr -> Expr . "==" Expr                            (rule 28)
	Expr -> Expr . "and" Expr                           (rule 29)
	Expr -> Expr . "or" Expr                            (rule 30)

	"+"            reduce using rule 20
	"-"            reduce using rule 20
	"*"            reduce using rule 20
	"/"            reduce using rule 20
	"^"            shift, and enter state 43
	"<"            reduce using rule 20
	">"            reduce using rule 20
	"<="           reduce using rule 20
	">="           reduce using rule 20
	"=="           reduce using rule 20
	"and"          reduce using rule 20
	"or"           reduce using rule 20
	")"            reduce using rule 20
	"}"            reduce using rule 20
	";"            reduce using rule 20
	","            reduce using rule 20


State 83

	Expr -> Expr . "^" Expr                             (rule 19)
	Expr -> Expr . "/" Expr                             (rule 20)
	Expr -> Expr . "*" Expr                             (rule 21)
	Expr -> Expr "*" Expr .                             (rule 21)
	Expr -> Expr . "+" Expr                             (rule 22)
	Expr -> Expr . "-" Expr                             (rule 23)
	Expr -> Expr . "<=" Expr                            (rule 24)
	Expr -> Expr . "<" Expr                             (rule 25)
	Expr -> Expr . ">" Expr                             (rule 26)
	Expr -> Expr . ">=" Expr                            (rule 27)
	Expr -> Expr . "==" Expr                            (rule 28)
	Expr -> Expr . "and" Expr                           (rule 29)
	Expr -> Expr . "or" Expr                            (rule 30)

	"+"            reduce using rule 21
	"-"            reduce using rule 21
	"*"            reduce using rule 21
	"/"            reduce using rule 21
	"^"            shift, and enter state 43
	"<"            reduce using rule 21
	">"            reduce using rule 21
	"<="           reduce using rule 21
	">="           reduce using rule 21
	"=="           reduce using rule 21
	"and"          reduce using rule 21
	"or"           reduce using rule 21
	")"            reduce using rule 21
	"}"            reduce using rule 21
	";"            reduce using rule 21
	","            reduce using rule 21


State 84

	Expr -> Expr . "^" Expr                             (rule 19)
	Expr -> Expr . "/" Expr                             (rule 20)
	Expr -> Expr . "*" Expr                             (rule 21)
	Expr -> Expr . "+" Expr                             (rule 22)
	Expr -> Expr . "-" Expr                             (rule 23)
	Expr -> Expr "-" Expr .                             (rule 23)
	Expr -> Expr . "<=" Expr                            (rule 24)
	Expr -> Expr . "<" Expr                             (rule 25)
	Expr -> Expr . ">" Expr                             (rule 26)
	Expr -> Expr . ">=" Expr                            (rule 27)
	Expr -> Expr . "==" Expr                            (rule 28)
	Expr -> Expr . "and" Expr                           (rule 29)
	Expr -> Expr . "or" Expr                            (rule 30)

	"+"            reduce using rule 23
	"-"            reduce using rule 23
	"*"            shift, and enter state 41
	"/"            shift, and enter state 42
	"^"            shift, and enter state 43
	"<"            reduce using rule 23
	">"            reduce using rule 23
	"<="           reduce using rule 23
	">="           reduce using rule 23
	"=="           reduce using rule 23
	"and"          reduce using rule 23
	"or"           reduce using rule 23
	")"            reduce using rule 23
	"}"            reduce using rule 23
	";"            reduce using rule 23
	","            reduce using rule 23


State 85

	Expr -> Expr . "^" Expr                             (rule 19)
	Expr -> Expr . "/" Expr                             (rule 20)
	Expr -> Expr . "*" Expr                             (rule 21)
	Expr -> Expr . "+" Expr                             (rule 22)
	Expr -> Expr "+" Expr .                             (rule 22)
	Expr -> Expr . "-" Expr                             (rule 23)
	Expr -> Expr . "<=" Expr                            (rule 24)
	Expr -> Expr . "<" Expr                             (rule 25)
	Expr -> Expr . ">" Expr                             (rule 26)
	Expr -> Expr . ">=" Expr                            (rule 27)
	Expr -> Expr . "==" Expr                            (rule 28)
	Expr -> Expr . "and" Expr                           (rule 29)
	Expr -> Expr . "or" Expr                            (rule 30)

	"+"            reduce using rule 22
	"-"            reduce using rule 22
	"*"            shift, and enter state 41
	"/"            shift, and enter state 42
	"^"            shift, and enter state 43
	"<"            reduce using rule 22
	">"            reduce using rule 22
	"<="           reduce using rule 22
	">="           reduce using rule 22
	"=="           reduce using rule 22
	"and"          reduce using rule 22
	"or"           reduce using rule 22
	")"            reduce using rule 22
	"}"            reduce using rule 22
	";"            reduce using rule 22
	","            reduce using rule 22


State 86

	Statement -> "while" "(" Expr ")" "{" StatementList . "}"    (rule 3)

	"}"            shift, and enter state 95


State 87

	Statement -> "if" "(" Expr ")" "{" StatementList . "}" "else" "{" StatementList "}"    (rule 2)

	"}"            shift, and enter state 94


State 88

	ExprList -> ExprList "," Expr .                     (rule 11)
	Expr -> Expr . "^" Expr                             (rule 19)
	Expr -> Expr . "/" Expr                             (rule 20)
	Expr -> Expr . "*" Expr                             (rule 21)
	Expr -> Expr . "+" Expr                             (rule 22)
	Expr -> Expr . "-" Expr                             (rule 23)
	Expr -> Expr . "<=" Expr                            (rule 24)
	Expr -> Expr . "<" Expr                             (rule 25)
	Expr -> Expr . ">" Expr                             (rule 26)
	Expr -> Expr . ">=" Expr                            (rule 27)
	Expr -> Expr . "==" Expr                            (rule 28)
	Expr -> Expr . "and" Expr                           (rule 29)
	Expr -> Expr . "or" Expr                            (rule 30)

	"+"            shift, and enter state 39
	"-"            shift, and enter state 40
	"*"            shift, and enter state 41
	"/"            shift, and enter state 42
	"^"            shift, and enter state 43
	"<"            shift, and enter state 44
	">"            shift, and enter state 45
	"<="           shift, and enter state 46
	">="           shift, and enter state 47
	"=="           shift, and enter state 48
	"and"          shift, and enter state 49
	"or"           shift, and enter state 50
	"}"            reduce using rule 11
	","            reduce using rule 11


State 89

	Expr -> ident "[" intLit "]" .                      (rule 33)

	"+"            reduce using rule 33
	"-"            reduce using rule 33
	"*"            reduce using rule 33
	"/"            reduce using rule 33
	"^"            reduce using rule 33
	"<"            reduce using rule 33
	">"            reduce using rule 33
	"<="           reduce using rule 33
	">="           reduce using rule 33
	"=="           reduce using rule 33
	"and"          reduce using rule 33
	"or"           reduce using rule 33
	")"            reduce using rule 33
	"}"            reduce using rule 33
	";"            reduce using rule 33
	","            reduce using rule 33


State 90

	Statement -> ident "[" intLit "]" "=" Expr . ";"    (rule 6)
	Expr -> Expr . "^" Expr                             (rule 19)
	Expr -> Expr . "/" Expr                             (rule 20)
	Expr -> Expr . "*" Expr                             (rule 21)
	Expr -> Expr . "+" Expr                             (rule 22)
	Expr -> Expr . "-" Expr                             (rule 23)
	Expr -> Expr . "<=" Expr                            (rule 24)
	Expr -> Expr . "<" Expr                             (rule 25)
	Expr -> Expr . ">" Expr                             (rule 26)
	Expr -> Expr . ">=" Expr                            (rule 27)
	Expr -> Expr . "==" Expr                            (rule 28)
	Expr -> Expr . "and" Expr                           (rule 29)
	Expr -> Expr . "or" Expr                            (rule 30)

	"+"            shift, and enter state 39
	"-"            shift, and enter state 40
	"*"            shift, and enter state 41
	"/"            shift, and enter state 42
	"^"            shift, and enter state 43
	"<"            shift, and enter state 44
	">"            shift, and enter state 45
	"<="           shift, and enter state 46
	">="           shift, and enter state 47
	"=="           shift, and enter state 48
	"and"          shift, and enter state 49
	"or"           shift, and enter state 50
	";"            shift, and enter state 93


State 91

	ArrayDeclr -> Type "[" "]" ident "=" Expr . ";"     (rule 15)
	Expr -> Expr . "^" Expr                             (rule 19)
	Expr -> Expr . "/" Expr                             (rule 20)
	Expr -> Expr . "*" Expr                             (rule 21)
	Expr -> Expr . "+" Expr                             (rule 22)
	Expr -> Expr . "-" Expr                             (rule 23)
	Expr -> Expr . "<=" Expr                            (rule 24)
	Expr -> Expr . "<" Expr                             (rule 25)
	Expr -> Expr . ">" Expr                             (rule 26)
	Expr -> Expr . ">=" Expr                            (rule 27)
	Expr -> Expr . "==" Expr                            (rule 28)
	Expr -> Expr . "and" Expr                           (rule 29)
	Expr -> Expr . "or" Expr                            (rule 30)

	"+"            shift, and enter state 39
	"-"            shift, and enter state 40
	"*"            shift, and enter state 41
	"/"            shift, and enter state 42
	"^"            shift, and enter state 43
	"<"            shift, and enter state 44
	">"            shift, and enter state 45
	"<="           shift, and enter state 46
	">="           shift, and enter state 47
	"=="           shift, and enter state 48
	"and"          shift, and enter state 49
	"or"           shift, and enter state 50
	";"            shift, and enter state 92


State 92

	ArrayDeclr -> Type "[" "]" ident "=" Expr ";" .     (rule 15)

	ident          reduce using rule 15
	"int"          reduce using rule 15
	"string"       reduce using rule 15
	"bool"         reduce using rule 15
	"}"            reduce using rule 15
	"if"           reduce using rule 15
	"while"        reduce using rule 15
	"print"        reduce using rule 15
	%eof           reduce using rule 15


State 93

	Statement -> ident "[" intLit "]" "=" Expr ";" .    (rule 6)

	ident          reduce using rule 6
	"int"          reduce using rule 6
	"string"       reduce using rule 6
	"bool"         reduce using rule 6
	"}"            reduce using rule 6
	"if"           reduce using rule 6
	"while"        reduce using rule 6
	"print"        reduce using rule 6
	%eof           reduce using rule 6


State 94

	Statement -> "if" "(" Expr ")" "{" StatementList "}" . "else" "{" StatementList "}"    (rule 2)

	"else"         shift, and enter state 96


State 95

	Statement -> "while" "(" Expr ")" "{" StatementList "}" .    (rule 3)

	ident          reduce using rule 3
	"int"          reduce using rule 3
	"string"       reduce using rule 3
	"bool"         reduce using rule 3
	"}"            reduce using rule 3
	"if"           reduce using rule 3
	"while"        reduce using rule 3
	"print"        reduce using rule 3
	%eof           reduce using rule 3


State 96

	Statement -> "if" "(" Expr ")" "{" StatementList "}" "else" . "{" StatementList "}"    (rule 2)

	"{"            shift, and enter state 97


State 97

	Statement -> "if" "(" Expr ")" "{" StatementList "}" "else" "{" . StatementList "}"    (rule 2)

	ident          shift, and enter state 7
	"int"          shift, and enter state 8
	"string"       shift, and enter state 9
	"bool"         shift, and enter state 10
	"}"            reduce using rule 17
	"if"           shift, and enter state 11
	"while"        shift, and enter state 12
	"print"        shift, and enter state 13

	Statement      goto state 2
	VarDeclr       goto state 3
	ArrayDeclr     goto state 4
	StatementList  goto state 98
	Type           goto state 6

State 98

	Statement -> "if" "(" Expr ")" "{" StatementList "}" "else" "{" StatementList . "}"    (rule 2)

	"}"            shift, and enter state 99


State 99

	Statement -> "if" "(" Expr ")" "{" StatementList "}" "else" "{" StatementList "}" .    (rule 2)

	ident          reduce using rule 2
	"int"          reduce using rule 2
	"string"       reduce using rule 2
	"bool"         reduce using rule 2
	"}"            reduce using rule 2
	"if"           reduce using rule 2
	"while"        reduce using rule 2
	"print"        reduce using rule 2
	%eof           reduce using rule 2


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 42
Number of terminals: 34
Number of non-terminals: 9
Number of states: 100
