-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from Grammar.y
-----------------------------------------------------------------------------

state 0 contains 8 shift/reduce conflicts.
state 11 contains 8 shift/reduce conflicts.
state 47 contains 2 shift/reduce conflicts.
state 60 contains 2 shift/reduce conflicts.
state 61 contains 2 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseCalc -> Program                        (0)
	Program -> StatementList                           (1)
	Statement -> "{" StatementList "}"                 (2)
	Statement -> "if" "(" Expr ")" Statement "else" Statement   (3)
	Statement -> "while" "(" Expr ")" Statement        (4)
	Statement -> "print" "(" Expr ")" ";"              (5)
	Statement -> ident "=" Expr ";"                    (6)
	Statement -> VarDeclr                              (7)
	Statement -> ArrayDeclr                            (8)
	VarDeclr -> Type ident ";"                         (9)
	VarDeclr -> Type ident "=" Expr ";"                (10)
	ExprList -> Expr                                   (11)
	ExprList -> Expr "," ExprList                      (12)
	ArrayDeclr -> Type "[" "]" ident ";"               (13)
	ArrayDeclr -> Type "[" "]" ident "=" Expr ";"      (14)
	StatementList -> Statement                         (15)
	StatementList -> StatementList Statement           (16)
	StatementList ->                                   (17)
	Expr -> Expr op Expr                               (18)
	Expr -> Expr compop Expr                           (19)
	Expr -> "not" Expr                                 (20)
	Expr -> intLit                                     (21)
	Expr -> ident                                      (22)
	Expr -> "true"                                     (23)
	Expr -> "false"                                    (24)
	Expr -> "(" Expr ")"                               (25)
	Expr -> "{" ExprList "}"                           (26)
	Type -> "bool"                                     (27)
	Type -> "int"                                      (28)
	Type -> "string"                                   (29)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	op             { TokenOp _ $$ }
	compop         { TokenCompareOp _ $$ }
	ident          { TokenIdent _ $$ }
	intLit         { TokenIntLit _ $$ }
	"int"          { TokenInt _ }
	"string"       { TokenString _ }
	"bool"         { TokenBool _ }
	"="            { TokenEquals _ }
	"not"          { TokenNegate _ }
	"("            { TokenLeftParen _ }
	")"            { TokenRightParen _ }
	"["            { TokenLeftBracket _ }
	"]"            { TokenRightBracket _ }
	"{"            { TokenLeftBrace _ }
	"}"            { TokenRightBrace _ }
	";"            { TokenSemiColon _ }
	","            { TokenColon _ }
	"if"           { TokenIf _ }
	"else"         { TokenElse  _ }
	"true"         { TokenTrue  _ }
	"false"        { TokenFalse _ }
	"while"        { TokenWhile _ }
	"print"        { TokenPrint _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseCalc rule  0
	Program         rule  1
	Statement       rules 2, 3, 4, 5, 6, 7, 8
	VarDeclr        rules 9, 10
	ExprList        rules 11, 12
	ArrayDeclr      rules 13, 14
	StatementList   rules 15, 16, 17
	Expr            rules 18, 19, 20, 21, 22, 23, 24, 25, 26
	Type            rules 27, 28, 29

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	ident          shift, and enter state 7
			(reduce using rule 17)

	"int"          shift, and enter state 8
			(reduce using rule 17)

	"string"       shift, and enter state 9
			(reduce using rule 17)

	"bool"         shift, and enter state 10
			(reduce using rule 17)

	"{"            shift, and enter state 11
			(reduce using rule 17)

	"if"           shift, and enter state 12
			(reduce using rule 17)

	"while"        shift, and enter state 13
			(reduce using rule 17)

	"print"        shift, and enter state 14
			(reduce using rule 17)

	%eof           reduce using rule 17

	Program        goto state 15
	Statement      goto state 2
	VarDeclr       goto state 3
	ArrayDeclr     goto state 4
	StatementList  goto state 5
	Type           goto state 6

State 1


	ident          shift, and enter state 7
	"int"          shift, and enter state 8
	"string"       shift, and enter state 9
	"bool"         shift, and enter state 10
	"{"            shift, and enter state 11
	"if"           shift, and enter state 12
	"while"        shift, and enter state 13
	"print"        shift, and enter state 14

	Statement      goto state 2
	VarDeclr       goto state 3
	ArrayDeclr     goto state 4
	StatementList  goto state 5
	Type           goto state 6

State 2

	StatementList -> Statement .                        (rule 15)

	ident          reduce using rule 15
	"int"          reduce using rule 15
	"string"       reduce using rule 15
	"bool"         reduce using rule 15
	"{"            reduce using rule 15
	"}"            reduce using rule 15
	"if"           reduce using rule 15
	"while"        reduce using rule 15
	"print"        reduce using rule 15
	%eof           reduce using rule 15


State 3

	Statement -> VarDeclr .                             (rule 7)

	ident          reduce using rule 7
	"int"          reduce using rule 7
	"string"       reduce using rule 7
	"bool"         reduce using rule 7
	"{"            reduce using rule 7
	"}"            reduce using rule 7
	"if"           reduce using rule 7
	"else"         reduce using rule 7
	"while"        reduce using rule 7
	"print"        reduce using rule 7
	%eof           reduce using rule 7


State 4

	Statement -> ArrayDeclr .                           (rule 8)

	ident          reduce using rule 8
	"int"          reduce using rule 8
	"string"       reduce using rule 8
	"bool"         reduce using rule 8
	"{"            reduce using rule 8
	"}"            reduce using rule 8
	"if"           reduce using rule 8
	"else"         reduce using rule 8
	"while"        reduce using rule 8
	"print"        reduce using rule 8
	%eof           reduce using rule 8


State 5

	Program -> StatementList .                          (rule 1)
	StatementList -> StatementList . Statement          (rule 16)

	ident          shift, and enter state 7
	"int"          shift, and enter state 8
	"string"       shift, and enter state 9
	"bool"         shift, and enter state 10
	"{"            shift, and enter state 11
	"if"           shift, and enter state 12
	"while"        shift, and enter state 13
	"print"        shift, and enter state 14
	%eof           reduce using rule 1

	Statement      goto state 23
	VarDeclr       goto state 3
	ArrayDeclr     goto state 4
	Type           goto state 6

State 6

	VarDeclr -> Type . ident ";"                        (rule 9)
	VarDeclr -> Type . ident "=" Expr ";"               (rule 10)
	ArrayDeclr -> Type . "[" "]" ident ";"              (rule 13)
	ArrayDeclr -> Type . "[" "]" ident "=" Expr ";"     (rule 14)

	ident          shift, and enter state 21
	"["            shift, and enter state 22


State 7

	Statement -> ident . "=" Expr ";"                   (rule 6)

	"="            shift, and enter state 20


State 8

	Type -> "int" .                                     (rule 28)

	ident          reduce using rule 28
	"["            reduce using rule 28


State 9

	Type -> "string" .                                  (rule 29)

	ident          reduce using rule 29
	"["            reduce using rule 29


State 10

	Type -> "bool" .                                    (rule 27)

	ident          reduce using rule 27
	"["            reduce using rule 27


State 11

	Statement -> "{" . StatementList "}"                (rule 2)

	ident          shift, and enter state 7
			(reduce using rule 17)

	"int"          shift, and enter state 8
			(reduce using rule 17)

	"string"       shift, and enter state 9
			(reduce using rule 17)

	"bool"         shift, and enter state 10
			(reduce using rule 17)

	"{"            shift, and enter state 11
			(reduce using rule 17)

	"}"            reduce using rule 17
	"if"           shift, and enter state 12
			(reduce using rule 17)

	"while"        shift, and enter state 13
			(reduce using rule 17)

	"print"        shift, and enter state 14
			(reduce using rule 17)


	Statement      goto state 2
	VarDeclr       goto state 3
	ArrayDeclr     goto state 4
	StatementList  goto state 19
	Type           goto state 6

State 12

	Statement -> "if" . "(" Expr ")" Statement "else" Statement    (rule 3)

	"("            shift, and enter state 18


State 13

	Statement -> "while" . "(" Expr ")" Statement       (rule 4)

	"("            shift, and enter state 17


State 14

	Statement -> "print" . "(" Expr ")" ";"             (rule 5)

	"("            shift, and enter state 16


State 15

	%start_parseCalc -> Program .                       (rule 0)

	%eof           accept


State 16

	Statement -> "print" "(" . Expr ")" ";"             (rule 5)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	"not"          shift, and enter state 30
	"("            shift, and enter state 31
	"{"            shift, and enter state 32
	"true"         shift, and enter state 33
	"false"        shift, and enter state 34

	Expr           goto state 38

State 17

	Statement -> "while" "(" . Expr ")" Statement       (rule 4)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	"not"          shift, and enter state 30
	"("            shift, and enter state 31
	"{"            shift, and enter state 32
	"true"         shift, and enter state 33
	"false"        shift, and enter state 34

	Expr           goto state 37

State 18

	Statement -> "if" "(" . Expr ")" Statement "else" Statement    (rule 3)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	"not"          shift, and enter state 30
	"("            shift, and enter state 31
	"{"            shift, and enter state 32
	"true"         shift, and enter state 33
	"false"        shift, and enter state 34

	Expr           goto state 36

State 19

	Statement -> "{" StatementList . "}"                (rule 2)
	StatementList -> StatementList . Statement          (rule 16)

	ident          shift, and enter state 7
	"int"          shift, and enter state 8
	"string"       shift, and enter state 9
	"bool"         shift, and enter state 10
	"{"            shift, and enter state 11
	"}"            shift, and enter state 35
	"if"           shift, and enter state 12
	"while"        shift, and enter state 13
	"print"        shift, and enter state 14

	Statement      goto state 23
	VarDeclr       goto state 3
	ArrayDeclr     goto state 4
	Type           goto state 6

State 20

	Statement -> ident "=" . Expr ";"                   (rule 6)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	"not"          shift, and enter state 30
	"("            shift, and enter state 31
	"{"            shift, and enter state 32
	"true"         shift, and enter state 33
	"false"        shift, and enter state 34

	Expr           goto state 27

State 21

	VarDeclr -> Type ident . ";"                        (rule 9)
	VarDeclr -> Type ident . "=" Expr ";"               (rule 10)

	"="            shift, and enter state 25
	";"            shift, and enter state 26


State 22

	ArrayDeclr -> Type "[" . "]" ident ";"              (rule 13)
	ArrayDeclr -> Type "[" . "]" ident "=" Expr ";"     (rule 14)

	"]"            shift, and enter state 24


State 23

	StatementList -> StatementList Statement .          (rule 16)

	ident          reduce using rule 16
	"int"          reduce using rule 16
	"string"       reduce using rule 16
	"bool"         reduce using rule 16
	"{"            reduce using rule 16
	"}"            reduce using rule 16
	"if"           reduce using rule 16
	"while"        reduce using rule 16
	"print"        reduce using rule 16
	%eof           reduce using rule 16


State 24

	ArrayDeclr -> Type "[" "]" . ident ";"              (rule 13)
	ArrayDeclr -> Type "[" "]" . ident "=" Expr ";"     (rule 14)

	ident          shift, and enter state 50


State 25

	VarDeclr -> Type ident "=" . Expr ";"               (rule 10)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	"not"          shift, and enter state 30
	"("            shift, and enter state 31
	"{"            shift, and enter state 32
	"true"         shift, and enter state 33
	"false"        shift, and enter state 34

	Expr           goto state 49

State 26

	VarDeclr -> Type ident ";" .                        (rule 9)

	ident          reduce using rule 9
	"int"          reduce using rule 9
	"string"       reduce using rule 9
	"bool"         reduce using rule 9
	"{"            reduce using rule 9
	"}"            reduce using rule 9
	"if"           reduce using rule 9
	"else"         reduce using rule 9
	"while"        reduce using rule 9
	"print"        reduce using rule 9
	%eof           reduce using rule 9


State 27

	Statement -> ident "=" Expr . ";"                   (rule 6)
	Expr -> Expr . op Expr                              (rule 18)
	Expr -> Expr . compop Expr                          (rule 19)

	op             shift, and enter state 39
	compop         shift, and enter state 40
	";"            shift, and enter state 48


State 28

	Expr -> ident .                                     (rule 22)

	op             reduce using rule 22
	compop         reduce using rule 22
	")"            reduce using rule 22
	"}"            reduce using rule 22
	";"            reduce using rule 22
	","            reduce using rule 22


State 29

	Expr -> intLit .                                    (rule 21)

	op             reduce using rule 21
	compop         reduce using rule 21
	")"            reduce using rule 21
	"}"            reduce using rule 21
	";"            reduce using rule 21
	","            reduce using rule 21


State 30

	Expr -> "not" . Expr                                (rule 20)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	"not"          shift, and enter state 30
	"("            shift, and enter state 31
	"{"            shift, and enter state 32
	"true"         shift, and enter state 33
	"false"        shift, and enter state 34

	Expr           goto state 47

State 31

	Expr -> "(" . Expr ")"                              (rule 25)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	"not"          shift, and enter state 30
	"("            shift, and enter state 31
	"{"            shift, and enter state 32
	"true"         shift, and enter state 33
	"false"        shift, and enter state 34

	Expr           goto state 46

State 32

	Expr -> "{" . ExprList "}"                          (rule 26)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	"not"          shift, and enter state 30
	"("            shift, and enter state 31
	"{"            shift, and enter state 32
	"true"         shift, and enter state 33
	"false"        shift, and enter state 34

	ExprList       goto state 44
	Expr           goto state 45

State 33

	Expr -> "true" .                                    (rule 23)

	op             reduce using rule 23
	compop         reduce using rule 23
	")"            reduce using rule 23
	"}"            reduce using rule 23
	";"            reduce using rule 23
	","            reduce using rule 23


State 34

	Expr -> "false" .                                   (rule 24)

	op             reduce using rule 24
	compop         reduce using rule 24
	")"            reduce using rule 24
	"}"            reduce using rule 24
	";"            reduce using rule 24
	","            reduce using rule 24


State 35

	Statement -> "{" StatementList "}" .                (rule 2)

	ident          reduce using rule 2
	"int"          reduce using rule 2
	"string"       reduce using rule 2
	"bool"         reduce using rule 2
	"{"            reduce using rule 2
	"}"            reduce using rule 2
	"if"           reduce using rule 2
	"else"         reduce using rule 2
	"while"        reduce using rule 2
	"print"        reduce using rule 2
	%eof           reduce using rule 2


State 36

	Statement -> "if" "(" Expr . ")" Statement "else" Statement    (rule 3)
	Expr -> Expr . op Expr                              (rule 18)
	Expr -> Expr . compop Expr                          (rule 19)

	op             shift, and enter state 39
	compop         shift, and enter state 40
	")"            shift, and enter state 43


State 37

	Statement -> "while" "(" Expr . ")" Statement       (rule 4)
	Expr -> Expr . op Expr                              (rule 18)
	Expr -> Expr . compop Expr                          (rule 19)

	op             shift, and enter state 39
	compop         shift, and enter state 40
	")"            shift, and enter state 42


State 38

	Statement -> "print" "(" Expr . ")" ";"             (rule 5)
	Expr -> Expr . op Expr                              (rule 18)
	Expr -> Expr . compop Expr                          (rule 19)

	op             shift, and enter state 39
	compop         shift, and enter state 40
	")"            shift, and enter state 41


State 39

	Expr -> Expr op . Expr                              (rule 18)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	"not"          shift, and enter state 30
	"("            shift, and enter state 31
	"{"            shift, and enter state 32
	"true"         shift, and enter state 33
	"false"        shift, and enter state 34

	Expr           goto state 61

State 40

	Expr -> Expr compop . Expr                          (rule 19)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	"not"          shift, and enter state 30
	"("            shift, and enter state 31
	"{"            shift, and enter state 32
	"true"         shift, and enter state 33
	"false"        shift, and enter state 34

	Expr           goto state 60

State 41

	Statement -> "print" "(" Expr ")" . ";"             (rule 5)

	";"            shift, and enter state 59


State 42

	Statement -> "while" "(" Expr ")" . Statement       (rule 4)

	ident          shift, and enter state 7
	"int"          shift, and enter state 8
	"string"       shift, and enter state 9
	"bool"         shift, and enter state 10
	"{"            shift, and enter state 11
	"if"           shift, and enter state 12
	"while"        shift, and enter state 13
	"print"        shift, and enter state 14

	Statement      goto state 58
	VarDeclr       goto state 3
	ArrayDeclr     goto state 4
	Type           goto state 6

State 43

	Statement -> "if" "(" Expr ")" . Statement "else" Statement    (rule 3)

	ident          shift, and enter state 7
	"int"          shift, and enter state 8
	"string"       shift, and enter state 9
	"bool"         shift, and enter state 10
	"{"            shift, and enter state 11
	"if"           shift, and enter state 12
	"while"        shift, and enter state 13
	"print"        shift, and enter state 14

	Statement      goto state 57
	VarDeclr       goto state 3
	ArrayDeclr     goto state 4
	Type           goto state 6

State 44

	Expr -> "{" ExprList . "}"                          (rule 26)

	"}"            shift, and enter state 56


State 45

	ExprList -> Expr .                                  (rule 11)
	ExprList -> Expr . "," ExprList                     (rule 12)
	Expr -> Expr . op Expr                              (rule 18)
	Expr -> Expr . compop Expr                          (rule 19)

	op             shift, and enter state 39
	compop         shift, and enter state 40
	"}"            reduce using rule 11
	","            shift, and enter state 55


State 46

	Expr -> Expr . op Expr                              (rule 18)
	Expr -> Expr . compop Expr                          (rule 19)
	Expr -> "(" Expr . ")"                              (rule 25)

	op             shift, and enter state 39
	compop         shift, and enter state 40
	")"            shift, and enter state 54


State 47

	Expr -> Expr . op Expr                              (rule 18)
	Expr -> Expr . compop Expr                          (rule 19)
	Expr -> "not" Expr .                                (rule 20)

	op             shift, and enter state 39
			(reduce using rule 20)

	compop         shift, and enter state 40
			(reduce using rule 20)

	")"            reduce using rule 20
	"}"            reduce using rule 20
	";"            reduce using rule 20
	","            reduce using rule 20


State 48

	Statement -> ident "=" Expr ";" .                   (rule 6)

	ident          reduce using rule 6
	"int"          reduce using rule 6
	"string"       reduce using rule 6
	"bool"         reduce using rule 6
	"{"            reduce using rule 6
	"}"            reduce using rule 6
	"if"           reduce using rule 6
	"else"         reduce using rule 6
	"while"        reduce using rule 6
	"print"        reduce using rule 6
	%eof           reduce using rule 6


State 49

	VarDeclr -> Type ident "=" Expr . ";"               (rule 10)
	Expr -> Expr . op Expr                              (rule 18)
	Expr -> Expr . compop Expr                          (rule 19)

	op             shift, and enter state 39
	compop         shift, and enter state 40
	";"            shift, and enter state 53


State 50

	ArrayDeclr -> Type "[" "]" ident . ";"              (rule 13)
	ArrayDeclr -> Type "[" "]" ident . "=" Expr ";"     (rule 14)

	"="            shift, and enter state 51
	";"            shift, and enter state 52


State 51

	ArrayDeclr -> Type "[" "]" ident "=" . Expr ";"     (rule 14)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	"not"          shift, and enter state 30
	"("            shift, and enter state 31
	"{"            shift, and enter state 32
	"true"         shift, and enter state 33
	"false"        shift, and enter state 34

	Expr           goto state 64

State 52

	ArrayDeclr -> Type "[" "]" ident ";" .              (rule 13)

	ident          reduce using rule 13
	"int"          reduce using rule 13
	"string"       reduce using rule 13
	"bool"         reduce using rule 13
	"{"            reduce using rule 13
	"}"            reduce using rule 13
	"if"           reduce using rule 13
	"else"         reduce using rule 13
	"while"        reduce using rule 13
	"print"        reduce using rule 13
	%eof           reduce using rule 13


State 53

	VarDeclr -> Type ident "=" Expr ";" .               (rule 10)

	ident          reduce using rule 10
	"int"          reduce using rule 10
	"string"       reduce using rule 10
	"bool"         reduce using rule 10
	"{"            reduce using rule 10
	"}"            reduce using rule 10
	"if"           reduce using rule 10
	"else"         reduce using rule 10
	"while"        reduce using rule 10
	"print"        reduce using rule 10
	%eof           reduce using rule 10


State 54

	Expr -> "(" Expr ")" .                              (rule 25)

	op             reduce using rule 25
	compop         reduce using rule 25
	")"            reduce using rule 25
	"}"            reduce using rule 25
	";"            reduce using rule 25
	","            reduce using rule 25


State 55

	ExprList -> Expr "," . ExprList                     (rule 12)

	ident          shift, and enter state 28
	intLit         shift, and enter state 29
	"not"          shift, and enter state 30
	"("            shift, and enter state 31
	"{"            shift, and enter state 32
	"true"         shift, and enter state 33
	"false"        shift, and enter state 34

	ExprList       goto state 63
	Expr           goto state 45

State 56

	Expr -> "{" ExprList "}" .                          (rule 26)

	op             reduce using rule 26
	compop         reduce using rule 26
	")"            reduce using rule 26
	"}"            reduce using rule 26
	";"            reduce using rule 26
	","            reduce using rule 26


State 57

	Statement -> "if" "(" Expr ")" Statement . "else" Statement    (rule 3)

	"else"         shift, and enter state 62


State 58

	Statement -> "while" "(" Expr ")" Statement .       (rule 4)

	ident          reduce using rule 4
	"int"          reduce using rule 4
	"string"       reduce using rule 4
	"bool"         reduce using rule 4
	"{"            reduce using rule 4
	"}"            reduce using rule 4
	"if"           reduce using rule 4
	"else"         reduce using rule 4
	"while"        reduce using rule 4
	"print"        reduce using rule 4
	%eof           reduce using rule 4


State 59

	Statement -> "print" "(" Expr ")" ";" .             (rule 5)

	ident          reduce using rule 5
	"int"          reduce using rule 5
	"string"       reduce using rule 5
	"bool"         reduce using rule 5
	"{"            reduce using rule 5
	"}"            reduce using rule 5
	"if"           reduce using rule 5
	"else"         reduce using rule 5
	"while"        reduce using rule 5
	"print"        reduce using rule 5
	%eof           reduce using rule 5


State 60

	Expr -> Expr . op Expr                              (rule 18)
	Expr -> Expr . compop Expr                          (rule 19)
	Expr -> Expr compop Expr .                          (rule 19)

	op             shift, and enter state 39
			(reduce using rule 19)

	compop         shift, and enter state 40
			(reduce using rule 19)

	")"            reduce using rule 19
	"}"            reduce using rule 19
	";"            reduce using rule 19
	","            reduce using rule 19


State 61

	Expr -> Expr . op Expr                              (rule 18)
	Expr -> Expr op Expr .                              (rule 18)
	Expr -> Expr . compop Expr                          (rule 19)

	op             shift, and enter state 39
			(reduce using rule 18)

	compop         shift, and enter state 40
			(reduce using rule 18)

	")"            reduce using rule 18
	"}"            reduce using rule 18
	";"            reduce using rule 18
	","            reduce using rule 18


State 62

	Statement -> "if" "(" Expr ")" Statement "else" . Statement    (rule 3)

	ident          shift, and enter state 7
	"int"          shift, and enter state 8
	"string"       shift, and enter state 9
	"bool"         shift, and enter state 10
	"{"            shift, and enter state 11
	"if"           shift, and enter state 12
	"while"        shift, and enter state 13
	"print"        shift, and enter state 14

	Statement      goto state 66
	VarDeclr       goto state 3
	ArrayDeclr     goto state 4
	Type           goto state 6

State 63

	ExprList -> Expr "," ExprList .                     (rule 12)

	"}"            reduce using rule 12


State 64

	ArrayDeclr -> Type "[" "]" ident "=" Expr . ";"     (rule 14)
	Expr -> Expr . op Expr                              (rule 18)
	Expr -> Expr . compop Expr                          (rule 19)

	op             shift, and enter state 39
	compop         shift, and enter state 40
	";"            shift, and enter state 65


State 65

	ArrayDeclr -> Type "[" "]" ident "=" Expr ";" .     (rule 14)

	ident          reduce using rule 14
	"int"          reduce using rule 14
	"string"       reduce using rule 14
	"bool"         reduce using rule 14
	"{"            reduce using rule 14
	"}"            reduce using rule 14
	"if"           reduce using rule 14
	"else"         reduce using rule 14
	"while"        reduce using rule 14
	"print"        reduce using rule 14
	%eof           reduce using rule 14


State 66

	Statement -> "if" "(" Expr ")" Statement "else" Statement .    (rule 3)

	ident          reduce using rule 3
	"int"          reduce using rule 3
	"string"       reduce using rule 3
	"bool"         reduce using rule 3
	"{"            reduce using rule 3
	"}"            reduce using rule 3
	"if"           reduce using rule 3
	"else"         reduce using rule 3
	"while"        reduce using rule 3
	"print"        reduce using rule 3
	%eof           reduce using rule 3


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 30
Number of terminals: 23
Number of non-terminals: 9
Number of states: 67
