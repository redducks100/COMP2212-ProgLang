-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from Grammar.y
-----------------------------------------------------------------------------

state 62 contains 2 shift/reduce conflicts.
state 71 contains 2 shift/reduce conflicts.
state 72 contains 2 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseCalc -> MethodDecl                     (0)
	MethodDecl -> Type ident "(" FormalList ")" "{" StatementList "return" Expr ";" "}"   (1)
	MethodDecl -> "void" ident "(" FormalList ")" "{" StatementList "}"   (2)
	FormalList -> Type ident                           (3)
	FormalList -> Type ident "," FormalList            (4)
	Type -> "bool"                                     (5)
	Type -> "int"                                      (6)
	Type -> "string"                                   (7)
	VarDeclr -> Type ident ";"                         (8)
	VarDeclr -> Type ident "=" Expr ";"                (9)
	Statement -> "{" StatementList "}"                 (10)
	Statement -> "if" "(" Expr ")" Statement "else" Statement   (11)
	Statement -> "while" "(" Expr ")" Statement        (12)
	Statement -> "print" "(" Expr ")" ";"              (13)
	Statement -> ident "=" Expr ";"                    (14)
	Statement -> VarDeclr                              (15)
	StatementList -> Statement                         (16)
	StatementList -> StatementList Statement           (17)
	Expr -> Expr op Expr                               (18)
	Expr -> Expr compop Expr                           (19)
	Expr -> "not" Expr                                 (20)
	Expr -> intLit                                     (21)
	Expr -> ident                                      (22)
	Expr -> "true"                                     (23)
	Expr -> "false"                                    (24)
	Expr -> "(" Expr ")"                               (25)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	op             { TokenOp _ $$ }
	compop         { TokenCompareOp _ $$ }
	ident          { TokenIdent _ $$ }
	intLit         { TokenIntLit _ $$ }
	"int"          { TokenInt _ }
	"string"       { TokenString _ }
	"bool"         { TokenBool _ }
	"="            { TokenEquals _ }
	"not"          { TokenNegate _ }
	"("            { TokenLeftParen _ }
	")"            { TokenRightParen _ }
	"{"            { TokenLeftBrace _ }
	"}"            { TokenRightBrace _ }
	";"            { TokenSemiColon _ }
	","            { TokenColon _ }
	"return"       { TokenReturn _ }
	"if"           { TokenIf _ }
	"else"         { TokenElse  _ }
	"true"         { TokenTrue  _ }
	"false"        { TokenFalse _ }
	"while"        { TokenWhile _ }
	"void"         { TokenVoid _ }
	"print"        { TokenPrint _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseCalc rule  0
	MethodDecl      rules 1, 2
	FormalList      rules 3, 4
	Type            rules 5, 6, 7
	VarDeclr        rules 8, 9
	Statement       rules 10, 11, 12, 13, 14, 15
	StatementList   rules 16, 17
	Expr            rules 18, 19, 20, 21, 22, 23, 24, 25

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	"int"          shift, and enter state 3
	"string"       shift, and enter state 4
	"bool"         shift, and enter state 5
	"void"         shift, and enter state 7

	MethodDecl     goto state 6
	Type           goto state 2

State 1


	"int"          shift, and enter state 3
	"string"       shift, and enter state 4
	"bool"         shift, and enter state 5

	Type           goto state 2

State 2

	MethodDecl -> Type . ident "(" FormalList ")" "{" StatementList "return" Expr ";" "}"    (rule 1)

	ident          shift, and enter state 9


State 3

	Type -> "int" .                                     (rule 6)

	ident          reduce using rule 6


State 4

	Type -> "string" .                                  (rule 7)

	ident          reduce using rule 7


State 5

	Type -> "bool" .                                    (rule 5)

	ident          reduce using rule 5


State 6

	%start_parseCalc -> MethodDecl .                    (rule 0)

	%eof           accept


State 7

	MethodDecl -> "void" . ident "(" FormalList ")" "{" StatementList "}"    (rule 2)

	ident          shift, and enter state 8


State 8

	MethodDecl -> "void" ident . "(" FormalList ")" "{" StatementList "}"    (rule 2)

	"("            shift, and enter state 11


State 9

	MethodDecl -> Type ident . "(" FormalList ")" "{" StatementList "return" Expr ";" "}"    (rule 1)

	"("            shift, and enter state 10


State 10

	MethodDecl -> Type ident "(" . FormalList ")" "{" StatementList "return" Expr ";" "}"    (rule 1)

	"int"          shift, and enter state 3
	"string"       shift, and enter state 4
	"bool"         shift, and enter state 5

	FormalList     goto state 14
	Type           goto state 13

State 11

	MethodDecl -> "void" ident "(" . FormalList ")" "{" StatementList "}"    (rule 2)

	"int"          shift, and enter state 3
	"string"       shift, and enter state 4
	"bool"         shift, and enter state 5

	FormalList     goto state 12
	Type           goto state 13

State 12

	MethodDecl -> "void" ident "(" FormalList . ")" "{" StatementList "}"    (rule 2)

	")"            shift, and enter state 17


State 13

	FormalList -> Type . ident                          (rule 3)
	FormalList -> Type . ident "," FormalList           (rule 4)

	ident          shift, and enter state 16


State 14

	MethodDecl -> Type ident "(" FormalList . ")" "{" StatementList "return" Expr ";" "}"    (rule 1)

	")"            shift, and enter state 15


State 15

	MethodDecl -> Type ident "(" FormalList ")" . "{" StatementList "return" Expr ";" "}"    (rule 1)

	"{"            shift, and enter state 20


State 16

	FormalList -> Type ident .                          (rule 3)
	FormalList -> Type ident . "," FormalList           (rule 4)

	")"            reduce using rule 3
	","            shift, and enter state 19


State 17

	MethodDecl -> "void" ident "(" FormalList ")" . "{" StatementList "}"    (rule 2)

	"{"            shift, and enter state 18


State 18

	MethodDecl -> "void" ident "(" FormalList ")" "{" . StatementList "}"    (rule 2)

	ident          shift, and enter state 25
	"int"          shift, and enter state 3
	"string"       shift, and enter state 4
	"bool"         shift, and enter state 5
	"{"            shift, and enter state 26
	"if"           shift, and enter state 27
	"while"        shift, and enter state 28
	"print"        shift, and enter state 29

	Type           goto state 21
	VarDeclr       goto state 22
	Statement      goto state 23
	StatementList  goto state 31

State 19

	FormalList -> Type ident "," . FormalList           (rule 4)

	"int"          shift, and enter state 3
	"string"       shift, and enter state 4
	"bool"         shift, and enter state 5

	FormalList     goto state 30
	Type           goto state 13

State 20

	MethodDecl -> Type ident "(" FormalList ")" "{" . StatementList "return" Expr ";" "}"    (rule 1)

	ident          shift, and enter state 25
	"int"          shift, and enter state 3
	"string"       shift, and enter state 4
	"bool"         shift, and enter state 5
	"{"            shift, and enter state 26
	"if"           shift, and enter state 27
	"while"        shift, and enter state 28
	"print"        shift, and enter state 29

	Type           goto state 21
	VarDeclr       goto state 22
	Statement      goto state 23
	StatementList  goto state 24

State 21

	VarDeclr -> Type . ident ";"                        (rule 8)
	VarDeclr -> Type . ident "=" Expr ";"               (rule 9)

	ident          shift, and enter state 40


State 22

	Statement -> VarDeclr .                             (rule 15)

	ident          reduce using rule 15
	"int"          reduce using rule 15
	"string"       reduce using rule 15
	"bool"         reduce using rule 15
	"{"            reduce using rule 15
	"}"            reduce using rule 15
	"return"       reduce using rule 15
	"if"           reduce using rule 15
	"else"         reduce using rule 15
	"while"        reduce using rule 15
	"print"        reduce using rule 15


State 23

	StatementList -> Statement .                        (rule 16)

	ident          reduce using rule 16
	"int"          reduce using rule 16
	"string"       reduce using rule 16
	"bool"         reduce using rule 16
	"{"            reduce using rule 16
	"}"            reduce using rule 16
	"return"       reduce using rule 16
	"if"           reduce using rule 16
	"while"        reduce using rule 16
	"print"        reduce using rule 16


State 24

	MethodDecl -> Type ident "(" FormalList ")" "{" StatementList . "return" Expr ";" "}"    (rule 1)
	StatementList -> StatementList . Statement          (rule 17)

	ident          shift, and enter state 25
	"int"          shift, and enter state 3
	"string"       shift, and enter state 4
	"bool"         shift, and enter state 5
	"{"            shift, and enter state 26
	"return"       shift, and enter state 39
	"if"           shift, and enter state 27
	"while"        shift, and enter state 28
	"print"        shift, and enter state 29

	Type           goto state 21
	VarDeclr       goto state 22
	Statement      goto state 32

State 25

	Statement -> ident . "=" Expr ";"                   (rule 14)

	"="            shift, and enter state 38


State 26

	Statement -> "{" . StatementList "}"                (rule 10)

	ident          shift, and enter state 25
	"int"          shift, and enter state 3
	"string"       shift, and enter state 4
	"bool"         shift, and enter state 5
	"{"            shift, and enter state 26
	"if"           shift, and enter state 27
	"while"        shift, and enter state 28
	"print"        shift, and enter state 29

	Type           goto state 21
	VarDeclr       goto state 22
	Statement      goto state 23
	StatementList  goto state 37

State 27

	Statement -> "if" . "(" Expr ")" Statement "else" Statement    (rule 11)

	"("            shift, and enter state 36


State 28

	Statement -> "while" . "(" Expr ")" Statement       (rule 12)

	"("            shift, and enter state 35


State 29

	Statement -> "print" . "(" Expr ")" ";"             (rule 13)

	"("            shift, and enter state 34


State 30

	FormalList -> Type ident "," FormalList .           (rule 4)

	")"            reduce using rule 4


State 31

	MethodDecl -> "void" ident "(" FormalList ")" "{" StatementList . "}"    (rule 2)
	StatementList -> StatementList . Statement          (rule 17)

	ident          shift, and enter state 25
	"int"          shift, and enter state 3
	"string"       shift, and enter state 4
	"bool"         shift, and enter state 5
	"{"            shift, and enter state 26
	"}"            shift, and enter state 33
	"if"           shift, and enter state 27
	"while"        shift, and enter state 28
	"print"        shift, and enter state 29

	Type           goto state 21
	VarDeclr       goto state 22
	Statement      goto state 32

State 32

	StatementList -> StatementList Statement .          (rule 17)

	ident          reduce using rule 17
	"int"          reduce using rule 17
	"string"       reduce using rule 17
	"bool"         reduce using rule 17
	"{"            reduce using rule 17
	"}"            reduce using rule 17
	"return"       reduce using rule 17
	"if"           reduce using rule 17
	"while"        reduce using rule 17
	"print"        reduce using rule 17


State 33

	MethodDecl -> "void" ident "(" FormalList ")" "{" StatementList "}" .    (rule 2)

	%eof           reduce using rule 2


State 34

	Statement -> "print" "(" . Expr ")" ";"             (rule 13)

	ident          shift, and enter state 44
	intLit         shift, and enter state 45
	"not"          shift, and enter state 46
	"("            shift, and enter state 47
	"true"         shift, and enter state 48
	"false"        shift, and enter state 49

	Expr           goto state 54

State 35

	Statement -> "while" "(" . Expr ")" Statement       (rule 12)

	ident          shift, and enter state 44
	intLit         shift, and enter state 45
	"not"          shift, and enter state 46
	"("            shift, and enter state 47
	"true"         shift, and enter state 48
	"false"        shift, and enter state 49

	Expr           goto state 53

State 36

	Statement -> "if" "(" . Expr ")" Statement "else" Statement    (rule 11)

	ident          shift, and enter state 44
	intLit         shift, and enter state 45
	"not"          shift, and enter state 46
	"("            shift, and enter state 47
	"true"         shift, and enter state 48
	"false"        shift, and enter state 49

	Expr           goto state 52

State 37

	Statement -> "{" StatementList . "}"                (rule 10)
	StatementList -> StatementList . Statement          (rule 17)

	ident          shift, and enter state 25
	"int"          shift, and enter state 3
	"string"       shift, and enter state 4
	"bool"         shift, and enter state 5
	"{"            shift, and enter state 26
	"}"            shift, and enter state 51
	"if"           shift, and enter state 27
	"while"        shift, and enter state 28
	"print"        shift, and enter state 29

	Type           goto state 21
	VarDeclr       goto state 22
	Statement      goto state 32

State 38

	Statement -> ident "=" . Expr ";"                   (rule 14)

	ident          shift, and enter state 44
	intLit         shift, and enter state 45
	"not"          shift, and enter state 46
	"("            shift, and enter state 47
	"true"         shift, and enter state 48
	"false"        shift, and enter state 49

	Expr           goto state 50

State 39

	MethodDecl -> Type ident "(" FormalList ")" "{" StatementList "return" . Expr ";" "}"    (rule 1)

	ident          shift, and enter state 44
	intLit         shift, and enter state 45
	"not"          shift, and enter state 46
	"("            shift, and enter state 47
	"true"         shift, and enter state 48
	"false"        shift, and enter state 49

	Expr           goto state 43

State 40

	VarDeclr -> Type ident . ";"                        (rule 8)
	VarDeclr -> Type ident . "=" Expr ";"               (rule 9)

	"="            shift, and enter state 41
	";"            shift, and enter state 42


State 41

	VarDeclr -> Type ident "=" . Expr ";"               (rule 9)

	ident          shift, and enter state 44
	intLit         shift, and enter state 45
	"not"          shift, and enter state 46
	"("            shift, and enter state 47
	"true"         shift, and enter state 48
	"false"        shift, and enter state 49

	Expr           goto state 64

State 42

	VarDeclr -> Type ident ";" .                        (rule 8)

	ident          reduce using rule 8
	"int"          reduce using rule 8
	"string"       reduce using rule 8
	"bool"         reduce using rule 8
	"{"            reduce using rule 8
	"}"            reduce using rule 8
	"return"       reduce using rule 8
	"if"           reduce using rule 8
	"else"         reduce using rule 8
	"while"        reduce using rule 8
	"print"        reduce using rule 8


State 43

	MethodDecl -> Type ident "(" FormalList ")" "{" StatementList "return" Expr . ";" "}"    (rule 1)
	Expr -> Expr . op Expr                              (rule 18)
	Expr -> Expr . compop Expr                          (rule 19)

	op             shift, and enter state 55
	compop         shift, and enter state 56
	";"            shift, and enter state 63


State 44

	Expr -> ident .                                     (rule 22)

	op             reduce using rule 22
	compop         reduce using rule 22
	")"            reduce using rule 22
	";"            reduce using rule 22


State 45

	Expr -> intLit .                                    (rule 21)

	op             reduce using rule 21
	compop         reduce using rule 21
	")"            reduce using rule 21
	";"            reduce using rule 21


State 46

	Expr -> "not" . Expr                                (rule 20)

	ident          shift, and enter state 44
	intLit         shift, and enter state 45
	"not"          shift, and enter state 46
	"("            shift, and enter state 47
	"true"         shift, and enter state 48
	"false"        shift, and enter state 49

	Expr           goto state 62

State 47

	Expr -> "(" . Expr ")"                              (rule 25)

	ident          shift, and enter state 44
	intLit         shift, and enter state 45
	"not"          shift, and enter state 46
	"("            shift, and enter state 47
	"true"         shift, and enter state 48
	"false"        shift, and enter state 49

	Expr           goto state 61

State 48

	Expr -> "true" .                                    (rule 23)

	op             reduce using rule 23
	compop         reduce using rule 23
	")"            reduce using rule 23
	";"            reduce using rule 23


State 49

	Expr -> "false" .                                   (rule 24)

	op             reduce using rule 24
	compop         reduce using rule 24
	")"            reduce using rule 24
	";"            reduce using rule 24


State 50

	Statement -> ident "=" Expr . ";"                   (rule 14)
	Expr -> Expr . op Expr                              (rule 18)
	Expr -> Expr . compop Expr                          (rule 19)

	op             shift, and enter state 55
	compop         shift, and enter state 56
	";"            shift, and enter state 60


State 51

	Statement -> "{" StatementList "}" .                (rule 10)

	ident          reduce using rule 10
	"int"          reduce using rule 10
	"string"       reduce using rule 10
	"bool"         reduce using rule 10
	"{"            reduce using rule 10
	"}"            reduce using rule 10
	"return"       reduce using rule 10
	"if"           reduce using rule 10
	"else"         reduce using rule 10
	"while"        reduce using rule 10
	"print"        reduce using rule 10


State 52

	Statement -> "if" "(" Expr . ")" Statement "else" Statement    (rule 11)
	Expr -> Expr . op Expr                              (rule 18)
	Expr -> Expr . compop Expr                          (rule 19)

	op             shift, and enter state 55
	compop         shift, and enter state 56
	")"            shift, and enter state 59


State 53

	Statement -> "while" "(" Expr . ")" Statement       (rule 12)
	Expr -> Expr . op Expr                              (rule 18)
	Expr -> Expr . compop Expr                          (rule 19)

	op             shift, and enter state 55
	compop         shift, and enter state 56
	")"            shift, and enter state 58


State 54

	Statement -> "print" "(" Expr . ")" ";"             (rule 13)
	Expr -> Expr . op Expr                              (rule 18)
	Expr -> Expr . compop Expr                          (rule 19)

	op             shift, and enter state 55
	compop         shift, and enter state 56
	")"            shift, and enter state 57


State 55

	Expr -> Expr op . Expr                              (rule 18)

	ident          shift, and enter state 44
	intLit         shift, and enter state 45
	"not"          shift, and enter state 46
	"("            shift, and enter state 47
	"true"         shift, and enter state 48
	"false"        shift, and enter state 49

	Expr           goto state 72

State 56

	Expr -> Expr compop . Expr                          (rule 19)

	ident          shift, and enter state 44
	intLit         shift, and enter state 45
	"not"          shift, and enter state 46
	"("            shift, and enter state 47
	"true"         shift, and enter state 48
	"false"        shift, and enter state 49

	Expr           goto state 71

State 57

	Statement -> "print" "(" Expr ")" . ";"             (rule 13)

	";"            shift, and enter state 70


State 58

	Statement -> "while" "(" Expr ")" . Statement       (rule 12)

	ident          shift, and enter state 25
	"int"          shift, and enter state 3
	"string"       shift, and enter state 4
	"bool"         shift, and enter state 5
	"{"            shift, and enter state 26
	"if"           shift, and enter state 27
	"while"        shift, and enter state 28
	"print"        shift, and enter state 29

	Type           goto state 21
	VarDeclr       goto state 22
	Statement      goto state 69

State 59

	Statement -> "if" "(" Expr ")" . Statement "else" Statement    (rule 11)

	ident          shift, and enter state 25
	"int"          shift, and enter state 3
	"string"       shift, and enter state 4
	"bool"         shift, and enter state 5
	"{"            shift, and enter state 26
	"if"           shift, and enter state 27
	"while"        shift, and enter state 28
	"print"        shift, and enter state 29

	Type           goto state 21
	VarDeclr       goto state 22
	Statement      goto state 68

State 60

	Statement -> ident "=" Expr ";" .                   (rule 14)

	ident          reduce using rule 14
	"int"          reduce using rule 14
	"string"       reduce using rule 14
	"bool"         reduce using rule 14
	"{"            reduce using rule 14
	"}"            reduce using rule 14
	"return"       reduce using rule 14
	"if"           reduce using rule 14
	"else"         reduce using rule 14
	"while"        reduce using rule 14
	"print"        reduce using rule 14


State 61

	Expr -> Expr . op Expr                              (rule 18)
	Expr -> Expr . compop Expr                          (rule 19)
	Expr -> "(" Expr . ")"                              (rule 25)

	op             shift, and enter state 55
	compop         shift, and enter state 56
	")"            shift, and enter state 67


State 62

	Expr -> Expr . op Expr                              (rule 18)
	Expr -> Expr . compop Expr                          (rule 19)
	Expr -> "not" Expr .                                (rule 20)

	op             shift, and enter state 55
			(reduce using rule 20)

	compop         shift, and enter state 56
			(reduce using rule 20)

	")"            reduce using rule 20
	";"            reduce using rule 20


State 63

	MethodDecl -> Type ident "(" FormalList ")" "{" StatementList "return" Expr ";" . "}"    (rule 1)

	"}"            shift, and enter state 66


State 64

	VarDeclr -> Type ident "=" Expr . ";"               (rule 9)
	Expr -> Expr . op Expr                              (rule 18)
	Expr -> Expr . compop Expr                          (rule 19)

	op             shift, and enter state 55
	compop         shift, and enter state 56
	";"            shift, and enter state 65


State 65

	VarDeclr -> Type ident "=" Expr ";" .               (rule 9)

	ident          reduce using rule 9
	"int"          reduce using rule 9
	"string"       reduce using rule 9
	"bool"         reduce using rule 9
	"{"            reduce using rule 9
	"}"            reduce using rule 9
	"return"       reduce using rule 9
	"if"           reduce using rule 9
	"else"         reduce using rule 9
	"while"        reduce using rule 9
	"print"        reduce using rule 9


State 66

	MethodDecl -> Type ident "(" FormalList ")" "{" StatementList "return" Expr ";" "}" .    (rule 1)

	%eof           reduce using rule 1


State 67

	Expr -> "(" Expr ")" .                              (rule 25)

	op             reduce using rule 25
	compop         reduce using rule 25
	")"            reduce using rule 25
	";"            reduce using rule 25


State 68

	Statement -> "if" "(" Expr ")" Statement . "else" Statement    (rule 11)

	"else"         shift, and enter state 73


State 69

	Statement -> "while" "(" Expr ")" Statement .       (rule 12)

	ident          reduce using rule 12
	"int"          reduce using rule 12
	"string"       reduce using rule 12
	"bool"         reduce using rule 12
	"{"            reduce using rule 12
	"}"            reduce using rule 12
	"return"       reduce using rule 12
	"if"           reduce using rule 12
	"else"         reduce using rule 12
	"while"        reduce using rule 12
	"print"        reduce using rule 12


State 70

	Statement -> "print" "(" Expr ")" ";" .             (rule 13)

	ident          reduce using rule 13
	"int"          reduce using rule 13
	"string"       reduce using rule 13
	"bool"         reduce using rule 13
	"{"            reduce using rule 13
	"}"            reduce using rule 13
	"return"       reduce using rule 13
	"if"           reduce using rule 13
	"else"         reduce using rule 13
	"while"        reduce using rule 13
	"print"        reduce using rule 13


State 71

	Expr -> Expr . op Expr                              (rule 18)
	Expr -> Expr . compop Expr                          (rule 19)
	Expr -> Expr compop Expr .                          (rule 19)

	op             shift, and enter state 55
			(reduce using rule 19)

	compop         shift, and enter state 56
			(reduce using rule 19)

	")"            reduce using rule 19
	";"            reduce using rule 19


State 72

	Expr -> Expr . op Expr                              (rule 18)
	Expr -> Expr op Expr .                              (rule 18)
	Expr -> Expr . compop Expr                          (rule 19)

	op             shift, and enter state 55
			(reduce using rule 18)

	compop         shift, and enter state 56
			(reduce using rule 18)

	")"            reduce using rule 18
	";"            reduce using rule 18


State 73

	Statement -> "if" "(" Expr ")" Statement "else" . Statement    (rule 11)

	ident          shift, and enter state 25
	"int"          shift, and enter state 3
	"string"       shift, and enter state 4
	"bool"         shift, and enter state 5
	"{"            shift, and enter state 26
	"if"           shift, and enter state 27
	"while"        shift, and enter state 28
	"print"        shift, and enter state 29

	Type           goto state 21
	VarDeclr       goto state 22
	Statement      goto state 74

State 74

	Statement -> "if" "(" Expr ")" Statement "else" Statement .    (rule 11)

	ident          reduce using rule 11
	"int"          reduce using rule 11
	"string"       reduce using rule 11
	"bool"         reduce using rule 11
	"{"            reduce using rule 11
	"}"            reduce using rule 11
	"return"       reduce using rule 11
	"if"           reduce using rule 11
	"else"         reduce using rule 11
	"while"        reduce using rule 11
	"print"        reduce using rule 11


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 26
Number of terminals: 23
Number of non-terminals: 8
Number of states: 75
